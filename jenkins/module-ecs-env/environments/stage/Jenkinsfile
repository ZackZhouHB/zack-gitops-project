pipeline {
    agent any
    environment {
        IMAGE_NAME = "zackz001/jenkins"
        IMAGE_TAG = "${env.BUILD_NUMBER}"
        LATEST_TAG = "latest"
        EMAIL_RECIPIENT = "zhbsoftboy1@gmail.com"
        GIT_REPO_URL = 'https://github.com/ZackZhouHB/zack-gitops-project.git'  // Git repository URL
        GIT_BRANCH = 'jenkins-cd'  // Git branch
        DOCKERHUB_CREDENTIALS_ID = 'dockerhub' // Docker Hub credentials
        REGION = 'ap-southeast-2'  // AWS region
    }
    stages {
//        stage('Clean Workspace') {
//            steps {
//                cleanWs()
//            }
//       }
        stage('Checkout Code') {
            steps {
                git branch: "${GIT_BRANCH}",
                    credentialsId: 'gittoken',
                    url: "${GIT_REPO_URL}"
            }
        }
        stage('Check Installed Package Versions') {
            steps {
                script {
                    try {
                        // Check Docker version
                        sh '''
                            if command -v docker >/dev/null 2>&1; then
                                echo "Docker Version: $(docker --version)"
                            else
                                echo "Docker is not installed"
                                exit 1
                            fi
                        '''
                    } catch (Exception e) {
                        echo "Error: Docker not found. ${e.message}"
                    }

                    try {
                        // Check Terraform version
                        sh '''
                            if command -v terraform >/dev/null 2>&1; then
                                echo "Terraform Version: $(terraform -version)"
                            else
                                echo "Terraform is not installed"
                                exit 1
                            fi
                        '''
                    } catch (Exception e) {
                        echo "Error: Terraform not found. ${e.message}"
                    }

                    try {
                        // Check Kubectl version
                        sh '''
                            if command -v kubectl >/dev/null 2>&1; then
                                echo "Kubectl Version: $(kubectl version --client)"
                            else
                                echo "Kubectl is not installed"
                                exit 1
                            fi
                        '''
                    } catch (Exception e) {
                        echo "Error: Kubectl not found. ${e.message}"
                    }

                    try {
                        // Check Trivy version
                        sh '''
                            if command -v trivy >/dev/null 2>&1; then
                                echo "Trivy Version: $(trivy --version)"
                            else
                                echo "Trivy is not installed"
                                exit 1
                            fi
                        '''
                    } catch (Exception e) {
                        echo "Error: Trivy not found. ${e.message}"
                    }

                    try {
                        // Check Ansible version
                        sh '''
                            if command -v ansible >/dev/null 2>&1; then
                                echo "Ansible Version: $(ansible --version)"
                            else
                                echo "Ansible is not installed"
                                exit 1
                            fi
                        '''
                    } catch (Exception e) {
                        echo "Error: Ansible not found. ${e.message}"
                    }

                    try {
                        // Check AWS CLI version
                        sh '''
                            if command -v aws >/dev/null 2>&1; then
                                echo "AWS CLI Version: $(aws --version)"
                            else
                                echo "AWS CLI is not installed"
                                exit 1
                            fi
                        '''
                    } catch (Exception e) {
                        echo "Error: AWS CLI not found. ${e.message}"
                    }
                }
            }
        }
        stage('Run a testing Ansible Playbook') {
            steps {
                script {
                    // Run the Ansible playbook using the hosts file from the repo
                    sh '''
                        echo "Running Ansible playbook:"
                        ansible-playbook -i "${WORKSPACE}/jenkins/terraform-ec2/hosts" "${WORKSPACE}/jenkins/terraform-ec2/test-playbook.yaml"
                    '''
                }
            }
        }
        stage('Verify AWS credential') {
            steps {
                withAWS(credentials: 'aws', region: 'ap-southeast-2') { // Replace with correct AWS credentials ID
                    script {
                        // List all existing S3 buckets and output the result to the Jenkins console
                        sh '''
                            echo "Listing all S3 buckets:"
                            aws s3 ls
                        '''
                    }
                }
            }
        }
        stage('Terraform Init and Apply') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws']]) {
                    sh '''
                        export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                        export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                        cd jenkins/module-ecs-env/environments/stage

                        # Check if Terraform has been initialized
                        if [ ! -d ".terraform" ]; then
                            echo "Terraform not initialized. Running 'terraform init'..."
                            terraform init
                        else
                            echo "Terraform already initialized. Skipping 'terraform init'."
                        fi
                        terraform validate
                        terraform apply -var-file="terraform.tfvars" -auto-approve -var "aws_region=${REGION}"
                    '''
                }
            }
        }
        // Stage to extract EC2 public IP
        stage('Extract alb_dns_name') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws']]) {
                    script {
                        def albdnsname = sh(script: '''
                            cd jenkins/module-ecs-env/environments/stage
                            terraform output -raw alb_dns_name
                        ''', returnStdout: true).trim()
                        echo "ALB Public DNS: ${albdnsname}"
                        // Set the environment variable for the next stages explicitly
                        env.ALB_PUBLIC_DNS = albdnsname
                    }
                }
            }
        }

        // **Fix: Adding a small sleep to ensure env is populated**
        stage('Validate ALB Public DNS') {
            steps {
                script {
                    timeout(time: 5, unit: 'MINUTES') {  // Add a timeout of 2 minutes
                        retry(150) {  // Retry the validation up to 3 times
                            sleep 2  // Ensure enough time for variable propagation
                            if (env.ALB_PUBLIC_DNS == null || env.ALB_PUBLIC_DNS == "") {
                                error "ALB Public DNS is not available or failed to fetch."
                            } else {
                                echo "ALB Public DNS is successfully fetched: ${env.ALB_PUBLIC_DNS}"
                            }
                        }
                    }
                }
            }
        }

        // New stage: Validate web blog accessibility
        stage('Validate Web Blog Access') {
            steps {
                script {
                    timeout(time: 5, unit: 'MINUTES') {  // Add a timeout of 5 minutes
                        retry(150) {  // Retry up to 3 times if the validation fails
                            sleep 2
                            echo "Validating web blog access via http://${env.ALB_PUBLIC_DNS}..."

                            // Use curl to validate HTTP response from the web blog
                            def response = sh(script: "curl -o /dev/null -s -w '%{http_code}' http://${env.ALB_PUBLIC_DNS}", returnStdout: true).trim()

                            if (response == '200') {
                                echo "Web blog is accessible and returned HTTP status code 200."
                            } else {
                                error "Web blog is not accessible. HTTP status code: ${response}"
                            }
                        }
                    }
                }
            }
        }  
        stage('Terraform destroy') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws']]) {
                    sh '''
                        export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                        export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                        cd jenkins/module-ecs-env/environments/stage

                        # Check if Terraform has been initialized
                        if [ ! -d ".terraform" ]; then
                            echo "Terraform not initialized. Running 'terraform init'..."
                            terraform init
                        else
                            echo "Terraform already initialized. Skipping 'terraform init'."
                        fi

                        terraform destroy -auto-approve -var "aws_region=${REGION}"
                    '''
                }
            }
        }              
    }
    post {
        success {
            echo "Pipeline completed successfully."
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
