<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-02-07T22:48:26+11:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Zack’s Blog</title><subtitle>## AWS   ## Jenkins  ## Microservices ## Automation ## K8S   ## CICD     ## Gitops </subtitle><entry><title type="html">Enable Free SSL certificate for blog</title><link href="http://localhost:4000/jekyll/cat2/2024/02/07/ssl-cert.html" rel="alternate" type="text/html" title="Enable Free SSL certificate for blog" /><published>2024-02-07T11:15:29+11:00</published><updated>2024-02-07T11:15:29+11:00</updated><id>http://localhost:4000/jekyll/cat2/2024/02/07/ssl-cert</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2024/02/07/ssl-cert.html"><![CDATA[<p><b>HTTPS with SSL cert </b></p>

<ul>
  <li>
    <p>Generate free SSL certificate from https://zerossl.com/</p>
  </li>
  <li>
    <p>Validate the Certificate with Private Key via https://www.sslshopper.com/certificate-key-matcher.html</p>
  </li>
  <li>
    <p>Upload ‘certificate.crt’ and ‘private.key’ to web server /etc/nginx/ssl/</p>
  </li>
  <li>
    <p>Setting up NGINX HTTPS Server by include the ssl parameter to the listen directive in the server block under ‘http’ in ‘nginx.conf’:</p>
  </li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">http <span class="o">{</span>

    server <span class="o">{</span>
        listen 443 ssl<span class="p">;</span>
        server_name zackdevops.online<span class="p">;</span>

        ssl_certificate /etc/nginx/ssl/certificate.crt<span class="p">;</span>
        ssl_certificate_key /etc/nginx/ssl/private.key<span class="p">;</span>

    <span class="o">}</span>
...
<span class="o">}</span></code></pre></figure>

<ul>
  <li>fix 2 errors</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">2024/02/07 10:29:33 <span class="o">[</span>emerg] 73175#73175: <span class="s2">"server"</span> directive is not allowed here <span class="k">in</span> /etc/nginx/nginx.conf:11

2024/02/07 10:30:25 <span class="o">[</span>error] 73207#73207: <span class="k">*</span>1 directory index of <span class="s2">"/usr/share/nginx/html/"</span> is forbidden,client: 163.53.144.82, server: zackdevops.online, request: <span class="s2">"GET / HTTP/1.1"</span>, host: <span class="s2">"zackdevops.online"</span>
2024/02/07 10:30:36 <span class="o">[</span>error] 73207#73207: <span class="k">*</span>1 directory index of <span class="s2">"/usr/share/nginx/html/"</span> is forbidden, client: 163.53.144.82, server: zackdevops.online, request: <span class="s2">"GET / HTTP/1.1"</span>, host: <span class="s2">"zackdevops.online"</span></code></pre></figure>

<p>Bingo! https://zackdevops.online connection is secure!</p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[HTTPS with SSL cert]]></summary></entry><entry><title type="html">Welcome to Zack’s blog!</title><link href="http://localhost:4000/jekyll/update/2024/02/01/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Zack’s blog!" /><published>2024-02-01T09:19:29+11:00</published><updated>2024-02-01T09:19:29+11:00</updated><id>http://localhost:4000/jekyll/update/2024/02/01/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2024/02/01/welcome-to-jekyll.html"><![CDATA[<p>Thanks for visiting this site.</p>

<p>If you come all along here, pls feel free to check out my detailed profile as bellow:</p>

<p>==========================================================</p>

<p>Check out the <a href="http://zackdevops.online/pro">Professional experience</a> for more info about my work experiences</p>

<p>Check out the <a href="http://zackdevops.online/certificate">AWS &amp; K8S certs</a> for my industral certifications.</p>

<p>Check out the technical skill set and roadmap for my personal AWS, DEVOPS and K8S at <a href="http://zackdevops.online/skillroadmap">Technical Skills</a>.</p>

<p>Feel free to visit all <a href="http://zackdevops.online/gitrepo">Github Repos</a> which contain all my previous project and practice. If any questions, you can always reach out to me via Email address down the bottom.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Thanks for visiting this site.]]></summary></entry><entry><title type="html">Ansible for AWS Dynamic Inventory</title><link href="http://localhost:4000/jekyll/cat2/2024/01/22/ansible-aws.html" rel="alternate" type="text/html" title="Ansible for AWS Dynamic Inventory" /><published>2024-01-22T11:15:29+11:00</published><updated>2024-01-22T11:15:29+11:00</updated><id>http://localhost:4000/jekyll/cat2/2024/01/22/ansible-aws</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2024/01/22/ansible-aws.html"><![CDATA[<p><b>About Ansible AWS Dynamic Inventory </b></p>

<p>When using Ansible with AWS, maintaining the inventory file will be a hectic task as AWS has frequently changed IPs, autoscaling instances, and much more.</p>

<p>Here we will install and apply ansible plugin for AWS dynamic inventory which makes an API call to AWS to get the instance information in the run time. It givesthe ec2 instance details dynamically to manage the AWS infrastructure</p>

<p>It supports most of the public and private cloud platforms not limited to just AWS.</p>

<ul>
  <li>The Dynamic Inventory Topology:</li>
</ul>

<p><img src="/assets/ansible-inventory.png" alt="image tooltip here" /></p>

<ul>
  <li>Setup Ansible AWS Dynamic Inventory</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># Ensure python3 &amp; pip3 installed in Ansible server</span>
python3 <span class="nt">--version</span>
<span class="nb">sudo </span>apt-get <span class="nb">install </span>python3 <span class="nt">-y</span>
<span class="nb">sudo </span>apt-get <span class="nb">install </span>python3-pip <span class="nt">-y</span>

<span class="c"># Install the boto3 library for ansible boot core to make API calls to AWS to retrieve ec2 instance details</span>
<span class="nb">sudo </span>pip3 <span class="nb">install </span>boto3

fix error
ERROR! The ec2 dynamic inventory plugin requires boto3 and botocore.


<span class="c"># Create an inventory directory under /opt and cd into the directory</span>
<span class="nb">sudo mkdir</span> <span class="nt">-p</span> /opt/ansible/inventory
<span class="nb">cd</span> /opt/ansible/inventory
<span class="nb">sudo </span>vi aws_ec2.yaml

<span class="nt">---</span>
plugin: aws_ec2

aws_access_key: &lt;xxx-AWS-ACCESS-KEY-HERE&gt;
aws_secret_key: &lt;xx-AWS-SECRET-KEY-HERE&gt;

regions:
  - us-west-2

keyed_groups:  <span class="c"># key filter for listing AWS ec2 groups</span>
  - key: tags
    prefix: tag
  - prefix: instance_type
    key: instance_type
  - key: placement.region
    prefix: aws_region

<span class="c"># edit ansible config file to enable AWS plugin and set inventory as above yaml</span>
<span class="nb">sudo </span>vi /etc/ansible/ansible.cfg

<span class="o">[</span>inventory]
enable_plugins <span class="o">=</span> aws_ec2

inventory      <span class="o">=</span> /opt/ansible/inventory/aws_ec2.yaml</code></pre></figure>

<p><img src="/assets/ec2-enable.png" alt="image tooltip here" />
<img src="/assets/ec2-inventory.png" alt="image tooltip here" /></p>

<ul>
  <li>Test if Ansible is able to ping all the machines returned by the dynamic inventory</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">ansible-inventory <span class="nt">-i</span> /opt/ansible/inventory/aws_ec2.yaml <span class="nt">--list</span>
ansible all <span class="nt">-m</span> ping</code></pre></figure>

<ul>
  <li>Execute Ansible Commands With ec2 Dynamic Inventory</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">ansible-inventory <span class="nt">--graph</span></code></pre></figure>

<p>List all instances grouped under tags, zones, and regions with dynamic group names like</p>

<p>aws_region_us_west_2</p>

<p>instance_type_t2_micro</p>

<p>tag_Name_Ansible</p>

<p><img src="/assets/list-aws-ec2.png" alt="image tooltip here" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[About Ansible AWS Dynamic Inventory]]></summary></entry><entry><title type="html">Istio - Traffic Management</title><link href="http://localhost:4000/jekyll/cat2/2024/01/15/istio.html" rel="alternate" type="text/html" title="Istio - Traffic Management" /><published>2024-01-15T11:15:29+11:00</published><updated>2024-01-15T11:15:29+11:00</updated><id>http://localhost:4000/jekyll/cat2/2024/01/15/istio</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2024/01/15/istio.html"><![CDATA[<p><b>Helm install istio </b></p>

<p>Here we use helm to install istio (istio-base, istiod, istia gateway), then deploy a sample online book store microservice “bookinfo”, practise istio tasks include Traffic Management, Observability, Security.</p>

<p>Bookinfo Topology:</p>

<p><img src="/assets/bookinfo.png" alt="image tooltip here" /></p>

<ul>
  <li>Helm install istio (istiod, istio-ingress)</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl create namespace istio-system
helm pull istio/base
helm <span class="nb">install </span>istio-base <span class="nb">.</span> <span class="nt">-n</span> istio-system <span class="nt">--set</span> <span class="nv">defaultRevision</span><span class="o">=</span>default

helm pull istio/istiod
helm <span class="nb">install </span>istiod <span class="nb">.</span> <span class="nt">-n</span> istio-system 

kubectl create namespace istio-ingress
helm pull istio/gateway
helm <span class="nb">install </span>istio-ingress <span class="nb">.</span> <span class="nt">-n</span> istio-ingress

helm <span class="nb">ls</span> <span class="nt">-n</span> istio-system
NAME      	NAMESPACE   	REVISION	UPDATED                                	STATUS  	CHART        	APP VERSION
istio-base	istio-system	1       	2023-12-17 08:14:06.943276388 +0800 CST	deployed	base-1.20.1  	1.20.1     
istiod    	istio-system	1       	2023-12-17 08:15:40.370551503 +0800 CST	deployed	istiod-1.20.1	1.20.1 

helm <span class="nb">ls</span> <span class="nt">-n</span> istio-ingress
NAME         	NAMESPACE    	REVISION	UPDATED                                	STATUS  	CHART         	APP VERSION
istio-ingress	istio-ingress	1       	2023-12-17 08:25:07.111999373 +0800 CST	deployed	gateway-1.20.1	1.20.1</code></pre></figure>

<ul>
  <li>Deploy bookinfo microservice and istio ingressgateway and virtualservice</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl label namespace istio-system istio-injection<span class="o">=</span>enabled

kubectl apply <span class="nt">-f</span> https://github.com/istio/istio/blob/master/samples/bookinfo/platform/kube/bookinfo.yaml <span class="nt">-oyaml</span> <span class="o">&gt;</span> bookinfo.yaml
kubectl apply <span class="nt">-f</span> bookinfo.yaml

kubectl get po
NAME                                                     READY   STATUS    RESTARTS       AGE
details-v1-698d88b-wmfcb                                 2/2     Running   0              21m
ratings-v1-6484c4d9bb-cb6gx                              2/2     Running   0              21m
reviews-v1-5b5d6494f4-jrsvc                              2/2     Running   0              21m
reviews-v2-5b667bcbf8-jgfzj                              2/2     Running   0              21m
reviews-v3-5b9bd44f4-tmmfz                               2/2     Running   0              21m

kubectl apply <span class="nt">-f</span> https://github.com/istio/istio/blob/master/samples/bookinfo/networking/bookinfo-gateway.yaml <span class="nt">-oyaml</span> <span class="o">&gt;</span> bookinfo-gateway.yaml
kubectl apply <span class="nt">-f</span> bookinfo-gateway.yaml</code></pre></figure>

<ul>
  <li>Deploy Kiali, jaeger, grafana, prometheus</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">wget https://raw.githubusercontent.com/istio/istio/release-1.20/samples/addons/prometheus.yaml
wget https://raw.githubusercontent.com/istio/istio/release-1.20/samples/addons/jaeger.yaml
wget https://raw.githubusercontent.com/istio/istio/release-1.20/samples/addons/grafana.yaml
kubectl create <span class="nt">-f</span> prometheus.yaml <span class="nt">-f</span> jaeger.yaml <span class="nt">-f</span> grafana.yaml</code></pre></figure>

<ul>
  <li>
    <p>visit http://book.istio:31000/productpage, with review (v1, v2, v3)
<img src="/assets/kiali.png" alt="image tooltip here" /></p>
  </li>
  <li>
    <p>define destinationruls and virtualservice for reviews</p>
  </li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">wget https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/networking/destination-rule-all.yaml
wget https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/networking/virtual-service-reviews-90-10.yaml

kubectl create <span class="nt">-f</span> destination-rule-all.yaml <span class="nt">-f</span> virtual-service-reviews-90-10.yaml   <span class="c"># route v1 10% and v3 90%</span>
kubectl scale deployment reviews-v2 <span class="nt">-n</span> istio-system <span class="nt">--replicas</span><span class="o">=</span>0 <span class="c"># scale down v2 to 0</span>

kubectl get dr <span class="nt">-A</span>
NAMESPACE      NAME          HOST          AGE
istio-system   details       details       6m56s
istio-system   productpage   productpage   6m56s
istio-system   ratings       ratings       6m56s
istio-system   reviews       reviews       6m56s
kubectl get vs <span class="nt">-A</span>
NAMESPACE      NAME       GATEWAYS               HOSTS            AGE
istio-system   bookinfo   <span class="o">[</span><span class="s2">"bookinfo-gateway"</span><span class="o">]</span>   <span class="o">[</span><span class="s2">"book.istio"</span><span class="o">]</span>   19h
istio-system   reviews                           <span class="o">[</span><span class="s2">"reviews"</span><span class="o">]</span>      5m26s

Spec:
  Hosts:
    reviews
  Http:
    Route:
      Destination:
        Host:    reviews
        Subset:  v1
      Weight:    10
      Destination:
        Host:    reviews
        Subset:  v3
      Weight:    90</code></pre></figure>

<p>refresh bookinfo webpage, test Traffic route weight as bellow</p>

<p><img src="/assets/1090.png" alt="image tooltip here" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[Helm install istio]]></summary></entry><entry><title type="html">Helm install Redis cluster</title><link href="http://localhost:4000/jekyll/cat2/2023/12/09/redis.html" rel="alternate" type="text/html" title="Helm install Redis cluster" /><published>2023-12-09T11:15:29+11:00</published><updated>2023-12-09T11:15:29+11:00</updated><id>http://localhost:4000/jekyll/cat2/2023/12/09/redis</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2023/12/09/redis.html"><![CDATA[<p><b>Helm install Redis cluster</b></p>

<p>Here we use helm to install Redis cluster, then validate statefuleset storage and cluster avalibility</p>

<p>Typical Redis cluster (3 master + 3 slave for slots) Topology:</p>

<p><img src="/assets/redis-slot.png" alt="image tooltip here" /></p>

<ul>
  <li>Helm install bitnami/redis-cluster</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">helm repo add bitnami https://charts.bitnami.com/bitnami
helm pull bitnami/redis-cluster
kubectl create ns redis
helm <span class="nb">install </span>zz-redis bitnami/redis-cluster <span class="nt">-n</span> redis</code></pre></figure>

<ul>
  <li>redis-cluster status</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl get po | <span class="nb">grep </span>zz-redis
zz-redis-redis-cluster-0                                 1/1     Running   3 <span class="o">(</span>33m ago<span class="o">)</span>     36m
zz-redis-redis-cluster-1                                 1/1     Running   1 <span class="o">(</span>32m ago<span class="o">)</span>     36m
zz-redis-redis-cluster-2                                 1/1     Running   1 <span class="o">(</span>33m ago<span class="o">)</span>     36m
zz-redis-redis-cluster-3                                 1/1     Running   1 <span class="o">(</span>33m ago<span class="o">)</span>     36m
zz-redis-redis-cluster-4                                 1/1     Running   1 <span class="o">(</span>33m ago<span class="o">)</span>     36m
zz-redis-redis-cluster-5                                 1/1     Running   1 <span class="o">(</span>33m ago<span class="o">)</span>     36m

kubectl get svc
zz-redis-redis-cluster                    ClusterIP   10.96.68.34     &lt;none&gt;        6379/TCP                        37m
zz-redis-redis-cluster-headless           ClusterIP   None            &lt;none&gt;        6379/TCP,16379/TCP              37m

kubectl get pvc
NAME                                  STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE
redis-data-zz-redis-redis-cluster-0   Bound    pvc-81f69c15-2f59-4704-9fec-c3ab217ebca5   1Gi        RWO            rook-ceph-block   37m
redis-data-zz-redis-redis-cluster-1   Bound    pvc-871dbb68-a78b-48a8-8feb-8726eb8a795e   1Gi        RWO            rook-ceph-block   37m
redis-data-zz-redis-redis-cluster-2   Bound    pvc-afd8c82e-c314-426a-a3cd-3c8d10b42bb1   1Gi        RWO            rook-ceph-block   37m
redis-data-zz-redis-redis-cluster-3   Bound    pvc-e8fd5d47-dd60-4358-8cf5-a17d6574bbe2   1Gi        RWO            rook-ceph-block   37m
redis-data-zz-redis-redis-cluster-4   Bound    pvc-04d4f148-b7c1-407e-b9a8-b2fa911405f0   1Gi        RWO            rook-ceph-block   37m
redis-data-zz-redis-redis-cluster-5   Bound    pvc-99e8b2cc-c5d5-4636-a19b-042922eca3cc   1Gi        RWO            rook-ceph-block   37m</code></pre></figure>

<ul>
  <li>Validate cluster by set key</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl <span class="nb">exec</span> <span class="nt">-it</span> zz-redis-redis-cluster-0 <span class="nt">--</span> sh
redis-cli
info replication
cluster info
cluster nodes
054ff137e9530c0e4d8afd1d00162d01952580de 172.16.122.179:6379@16379 slave 2ebcfdf7e74aa8755250384f7efa466f4d18e9d4 0 1702703474000 3 connected
7cfeb1d88dc3838e600a32c1e233b1c5f05006f1 172.16.58.197:6379@16379 master - 0 1702703473000 2 connected 5461-10922
1e56bad62197062fad465bbcc6b625bea8364db2 172.16.58.224:6379@16379 slave 7cfeb1d88dc3838e600a32c1e233b1c5f05006f1 0 1702703474954 2 connected
7e539b2209581c8375f7fb0aa9eedf5b98754b05 172.16.85.252:6379@16379 slave 889515187dbbb525fd73dc840d5bcad78305645d 0 1702703473947 1 connected
889515187dbbb525fd73dc840d5bcad78305645d 172.16.195.10:6379@16379 myself,master - 0 1702703469000 1 connected 0-5460
2ebcfdf7e74aa8755250384f7efa466f4d18e9d4 172.16.85.229:6379@16379 master - 0 1702703473000 3 connected 10923-16383


127.0.0.1:6379&gt; <span class="nb">set </span>dad zack
OK
127.0.0.1:6379&gt; get dad
<span class="s2">"zack"</span>

kubectl <span class="nb">exec</span> <span class="nt">-it</span> zz-redis-redis-cluster-4 <span class="nt">--</span> sh
redis-cli
127.0.0.1:6379&gt; KEYS <span class="k">*</span>
1<span class="o">)</span> <span class="s2">"dad"</span></code></pre></figure>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[Helm install Redis cluster]]></summary></entry><entry><title type="html">Apache Kafka cluster install</title><link href="http://localhost:4000/jekyll/cat2/2023/11/09/kafka.html" rel="alternate" type="text/html" title="Apache Kafka cluster install" /><published>2023-11-09T11:15:29+11:00</published><updated>2023-11-09T11:15:29+11:00</updated><id>http://localhost:4000/jekyll/cat2/2023/11/09/kafka</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2023/11/09/kafka.html"><![CDATA[<p><b>About Kafka </b></p>

<p>Apache Kafka has proven to be an extremely popular event streaming platform, as its scalable distributed architecture, high performance, and  use cases, some key terms and concepts as bellow:</p>

<ul>
  <li>
    <p>Kafka clusters and Kafka brokers</p>
  </li>
  <li>
    <p>Kafka clients and servers</p>
  </li>
  <li>
    <p>Producers, and Consumers, and Consumer groups</p>
  </li>
  <li>
    <p>Kafka topics &amp; Kafka partitions, offsets</p>
  </li>
  <li>
    <p>Kafka topic replication, leaders, and followers</p>
  </li>
  <li>
    <p>ZooKeeper or not</p>
  </li>
</ul>

<p>Typical Kafka Topology:</p>

<p><img src="/assets/kafka.png" alt="image tooltip here" /></p>

<ul>
  <li>Helm install bitnami/kafka</li>
</ul>

<p>Here we use helm to install Kafka, then validate statefuleset storage and cluster avalibility by create topic, producer and consumer</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">helm repo add bitnami https://charts.bitnami.com/bitnami
helm pull bitnami/kafka
kubectl create ns kafka
helm <span class="nb">install </span>zz-kafka <span class="nb">.</span> <span class="nt">-n</span> kafka</code></pre></figure>

<ul>
  <li>Kafka-cluster status</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl get all | <span class="nb">grep </span>zz-kaf
pod/zz-kafka-client                                          1/1     Running   0               6m27s
pod/zz-kafka-controller-0                                    1/1     Running   0               8m52s
pod/zz-kafka-controller-1                                    1/1     Running   0               8m52s
pod/zz-kafka-controller-2                                    1/1     Running   0               8m52s
service/zz-kafka                                  ClusterIP   10.96.58.62     &lt;none&gt;        9092/TCP                        8m52s
service/zz-kafka-controller-headless              ClusterIP   None            &lt;none&gt;        9094/TCP,9092/TCP,9093/TCP      8m52s
statefulset.apps/zz-kafka-controller                                    3/3     8m52s

kubectl get pvc
NAME                         STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE
data-zz-kafka-controller-0   Bound    pvc-f3831a5c-c9cf-46bb-a47d-58ea80f82e28   8Gi        RWO            rook-ceph-block   9m19s
data-zz-kafka-controller-1   Bound    pvc-a45fd063-7979-4c0d-8ae4-93b4b4b0bf7f   8Gi        RWO            rook-ceph-block   9m19s
data-zz-kafka-controller-2   Bound    pvc-ed48b71d-81be-4067-b05f-9e8dc64fab04   8Gi        RWO            rook-ceph-block   9m19s</code></pre></figure>

<ul>
  <li>Validate cluster by set key
create client.properties with SASL authentication details, copy to client</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl run zz-kafka-client <span class="nt">--restart</span><span class="o">=</span><span class="s1">'Never'</span> <span class="nt">--image</span> docker.io/bitnami/kafka:3.6.1-debian-11-r0 <span class="nt">--namespace</span> default <span class="nt">--command</span> <span class="nt">--</span> <span class="nb">sleep </span>infinity
kubectl <span class="nb">cp</span> <span class="nt">--namespace</span> default client.properties zz-kafka-client:/tmp/client.properties</code></pre></figure>

<p>open 2 bash window to access kafka client</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl <span class="nb">exec</span> <span class="nt">--tty</span> <span class="nt">-i</span> zz-kafka-client <span class="nt">--namespace</span> default <span class="nt">--</span> bash

window1:
    PRODUCER:
        kafka-console-producer.sh <span class="se">\</span>
            <span class="nt">--producer</span>.config /tmp/client.properties <span class="se">\</span>
            <span class="nt">--broker-list</span> zz-kafka-controller-0.zz-kafka-controller-headless.default.svc.cluster.local:9092,zz-kafka-controller-1.zz-kafka-controller-headless.default.svc.cluster.local:9092,zz-kafka-controller-2.zz-kafka-controller-headless.default.svc.cluster.local:9092 <span class="se">\</span>
            <span class="nt">--topic</span> <span class="nb">test

</span>window2:
    CONSUMER:
        kafka-console-consumer.sh <span class="se">\</span>
            <span class="nt">--consumer</span>.config /tmp/client.properties <span class="se">\</span>
            <span class="nt">--bootstrap-server</span> zz-kafka.default.svc.cluster.local:9092 <span class="se">\</span>
            <span class="nt">--topic</span> <span class="nb">test</span> <span class="se">\</span>
            <span class="nt">--from-beginning</span></code></pre></figure>

<p>test topic and PRODUCER with CONSUMER</p>

<p><img src="/assets/kafka-validation.png" alt="image tooltip here" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[About Kafka]]></summary></entry><entry><title type="html">Rook-Ceph for dynamic pv</title><link href="http://localhost:4000/jekyll/cat2/2023/11/09/ceph.html" rel="alternate" type="text/html" title="Rook-Ceph for dynamic pv" /><published>2023-11-09T11:15:29+11:00</published><updated>2023-11-09T11:15:29+11:00</updated><id>http://localhost:4000/jekyll/cat2/2023/11/09/ceph</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2023/11/09/ceph.html"><![CDATA[<p><b>Helm install Rook-Ceph for persistent storage</b></p>

<ul>
  <li>
    <p>Configure local VM block storage to add 50Gb sdb to all k8s master and work nodes</p>
  </li>
  <li>
    <p>install rook-ceph cluster</p>
  </li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">git clone <span class="nt">--single-branch</span> <span class="nt">--branch</span> master https://github.com/rook/rook.git
<span class="nb">cd </span>rook/deploy/examples
kubectl create <span class="nt">-f</span> crds.yaml <span class="nt">-f</span> common.yaml <span class="nt">-f</span> operator.yaml
kubectl create <span class="nt">-f</span> cluster.yaml</code></pre></figure>

<ul>
  <li>Ceph toolbox to check cluster status</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl create <span class="nt">-f</span> toolbox.yaml
kubectl <span class="nt">-n</span> rook-ceph <span class="nb">exec</span> <span class="nt">-it</span> deploy/rook-ceph-tools <span class="nt">--</span> bash
ceph status
ceph osd status
ceph <span class="nb">df
</span>rados <span class="nb">df</span></code></pre></figure>

<ul>
  <li>Ceph Dashboard svc for https login</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl create <span class="nt">-f</span> dashboard-external-https.yaml
kubectl <span class="nt">-n</span> rook-ceph get secret rook-ceph-dashboard-password <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">"{['data']['password']}"</span> | <span class="nb">base64</span> <span class="nt">--decode</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span></code></pre></figure>

<ul>
  <li>Create storage pool and storageclass</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl create <span class="nt">-f</span> pool.yaml
<span class="nb">cd </span>csi/rbd
kubectl create <span class="nt">-f</span> storageclass.yaml</code></pre></figure>

<ul>
  <li>set “rook-ceph-block” as default sc</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl patch storageclass rook-ceph-block <span class="nt">-p</span> <span class="s1">'{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'</span>

kubectl get sc
NAME                        PROVISIONER                  RECLAIMPOLICY  VOLUMEBINDINGMODE  ALLOWVOLUMEEXPANSION   AGE
rook-ceph-block <span class="o">(</span>default<span class="o">)</span>   rook-ceph.rbd.csi.ceph.com   Delete          Immediate          <span class="nb">true                  </span>8d</code></pre></figure>

<p>check pool and OSDs in ceph webui</p>

<p><img src="/assets/ceph.png" alt="image tooltip here" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[Helm install Rook-Ceph for persistent storage]]></summary></entry><entry><title type="html">Argo CD sync Github</title><link href="http://localhost:4000/jekyll/cat2/2023/11/07/ArgoCD.html" rel="alternate" type="text/html" title="Argo CD sync Github" /><published>2023-11-07T11:15:29+11:00</published><updated>2023-11-07T11:15:29+11:00</updated><id>http://localhost:4000/jekyll/cat2/2023/11/07/ArgoCD</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2023/11/07/ArgoCD.html"><![CDATA[<p>Topic</p>

<p><b>Argo CD sync local K8S deployment with Github manifest</b></p>

<p>Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes applications. This is a post to show how enable Argo CD on local k8s and AWS EKS, deploy application and sync with github manifest</p>

<ul>
  <li>Argo CD install ingress controller ingress-nginx</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl create namespace argocd
kubectl apply <span class="nt">-n</span> argocd <span class="nt">-f</span> https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml</code></pre></figure>

<ul>
  <li>Download and install Argo CD CLI</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">curl <span class="nt">-sSL</span> <span class="nt">-o</span> argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
<span class="nb">sudo install</span> <span class="nt">-m</span> 555 argocd-linux-amd64 /usr/local/bin/argocd
<span class="nb">rm </span>argocd-linux-amd64</code></pre></figure>

<ul>
  <li>configure Argo CD API Server and deploy zackweb</li>
</ul>

<p>Change the argocd-server service type to NodePort, init admin passwd and deploy “zackweb” via argocd application manifests (argo-zackweb-application.yaml)</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl patch svc argocd-server <span class="nt">-n</span> argocd <span class="nt">-p</span> <span class="s1">'{"spec": {"type": "NodePort"}}'</span>
argocd admin initial-password <span class="nt">-n</span> argocd
kubectl create <span class="nt">-f</span> argo-zackweb-application.yaml</code></pre></figure>

<p>argo-zackweb-application.yaml</p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">argoproj.io/v1alpha1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Application</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">zackweb</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">argocd</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">destination</span><span class="pi">:</span>
    <span class="na">namespace</span><span class="pi">:</span> <span class="s1">'</span><span class="s">zackweb'</span>
    <span class="na">server</span><span class="pi">:</span> <span class="s1">'</span><span class="s">https://kubernetes.default.svc'</span>
  <span class="na">source</span><span class="pi">:</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s">eks-deploy</span>
    <span class="na">repoURL</span><span class="pi">:</span> <span class="s1">'</span><span class="s">https://github.com/ZackZhouHB/zack-gitops-project'</span>
    <span class="na">targetRevision</span><span class="pi">:</span> <span class="s">editing</span>
  <span class="na">project</span><span class="pi">:</span> <span class="s">default</span>
  <span class="na">syncPolicy</span><span class="pi">:</span>
    <span class="na">automated</span><span class="pi">:</span>
      <span class="na">prune</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">selfHeal</span><span class="pi">:</span> <span class="kc">true</span>
    <span class="na">syncOptions</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">CreateNamespace=true</span></code></pre></figure>

<ul>
  <li>access to argocd UI check for sync</li>
</ul>

<p><img src="/assets/argo-demo.png" alt="image tooltip here" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[Topic]]></summary></entry><entry><title type="html">Ingress-nginx Routing for local DNS</title><link href="http://localhost:4000/jekyll/cat2/2023/11/06/ingresscontroller.html" rel="alternate" type="text/html" title="Ingress-nginx Routing for local DNS" /><published>2023-11-06T11:15:29+11:00</published><updated>2023-11-06T11:15:29+11:00</updated><id>http://localhost:4000/jekyll/cat2/2023/11/06/ingresscontroller</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2023/11/06/ingresscontroller.html"><![CDATA[<p>Topic</p>

<p><b>Ingress-nginx Routing for local DNS (zz.local)</b></p>

<ul>
  <li>helm install ingress controller ingress-nginx</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm <span class="nt">-n</span> ingress-nginx <span class="nb">install </span>ingress-nginx ingress-nginx/ingress-nginx <span class="nt">--create-namespace</span></code></pre></figure>

<ul>
  <li>create ingress to route root path to “zz.local” for “zackweb-service”</li>
</ul>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Ingress</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">nginx-ingress</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">rules</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">host</span><span class="pi">:</span> <span class="s">zz.local</span> 
    <span class="na">http</span><span class="pi">:</span>
      <span class="na">paths</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/</span>
        <span class="na">pathType</span><span class="pi">:</span> <span class="s">ImplementationSpecific</span>
        <span class="na">backend</span><span class="pi">:</span>
          <span class="na">service</span><span class="pi">:</span>
            <span class="na">name</span><span class="pi">:</span> <span class="s">zackweb-service</span>
            <span class="na">port</span><span class="pi">:</span>
              <span class="na">number</span><span class="pi">:</span> <span class="s">80</span></code></pre></figure>

<ul>
  <li>Browser visit “zz.local”</li>
</ul>

<p><img src="/assets/web.png" alt="image tooltip here" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[Topic]]></summary></entry><entry><title type="html">About Zackweb Gitops project!</title><link href="http://localhost:4000/jekyll/cat2/2023/11/02/about-this-project.html" rel="alternate" type="text/html" title="About Zackweb Gitops project!" /><published>2023-11-02T11:15:29+11:00</published><updated>2023-11-02T11:15:29+11:00</updated><id>http://localhost:4000/jekyll/cat2/2023/11/02/about-this-project</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2023/11/02/about-this-project.html"><![CDATA[<p><b>Project Introduction</b></p>

<p>This is my first web blog using Jekyll, as an pratical way by following <a href="https://cloudresumechallenge.dev/docs/the-challenge/aws/">Cloud Resume Challange</a> to build my cloud and devops concept and technical skillsets.</p>

<p><b>The Design</b></p>

<p>By design, I will create:</p>

<ul>
  <li>
    <p>a web blog <a href="http://zackdevops.online">Zack’s Blog</a> : with content and details to introduce myself</p>
  </li>
  <li>
    <p>a github repo <a href="https://github.com/ZackZhouHB/zack-gitops-project">zack-gitops-project</a>: to source control all code that I build and run locally by “jekyll serve”, validate site and pages, then push the source code to github.</p>
  </li>
  <li>
    <p>a Dockerfile to build jekyll code into a docker image running by nginx/alpine</p>
  </li>
  <li>
    <p>3 folder with manifest for staging and prod webapp deploy:</p>
  </li>
</ul>

<p><ins> /terrafom</ins>  for create AWS VPC and EKS to host website as production environment;</p>

<p><ins> /k8s-local-deploy</ins>  for website image deploy to local K8S as testing;</p>

<p><ins> /eks-deploy</ins>  for prod deployment with ArgoCD application manifest</p>

<ul>
  <li>
    <p>a EC2 instance: as staging env for AWS with Godaddy domain hosting test</p>
  </li>
  <li>
    <p>a EKS cluster:  as PROD environment to validate ArgoCD sync for web deployment</p>
  </li>
</ul>

<p><b>The Archetecture</b></p>

<p><img src="/assets/aws-ar.png" alt="image tooltip here" /></p>

<p>This is the design of CICD pipeline in GitHub Action workflow to auto build docker images for this website every time I make code change and commit to my git repo  <a href="https://github.com/ZackZhouHB/zack-gitops-project">zack-gitops-project</a>  [Branch : editing]</p>

<p><img src="/assets/cicd.png" alt="image tooltip here" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[Project Introduction]]></summary></entry></feed>