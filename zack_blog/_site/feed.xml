<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-12-16T19:45:40+11:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Zack’s Tech Stack</title><subtitle>## AWS   ## Jenkins  ## Microservices ## Automation ## K8S   ## CICD     ## Gitops </subtitle><entry><title type="html">Welcome to Zack’s blog!</title><link href="http://localhost:4000/jekyll/update/2023/12/08/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Zack’s blog!" /><published>2023-12-08T09:19:29+11:00</published><updated>2023-12-08T09:19:29+11:00</updated><id>http://localhost:4000/jekyll/update/2023/12/08/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2023/12/08/welcome-to-jekyll.html"><![CDATA[<p>Thanks for visiting this site.</p>

<p>If you come all along here, pls feel free to check out my detailed profile as bellow:</p>

<p>==========================================================</p>

<p>Check out the <a href="http://zackdevops.online/pro">Professional experience</a> for more info about my work experiences</p>

<p>Check out the <a href="http://zackdevops.online/certificate">AWS &amp; K8S certs</a> for my industral certifications.</p>

<p>Check out the technical skill set and roadmap for my personal AWS, DEVOPS and K8S at <a href="http://zackdevops.online/skillroadmap">Technical Skills</a>.</p>

<p>Feel free to visit all <a href="http://zackdevops.online/gitrepo">Github Repos</a> which contain all my previous project and practice. If any questions, you can always reach out to me via Email address down the bottom.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">print_hi</span><span class="p">(</span><span class="nb">name</span><span class="p">)</span>
  <span class="nb">puts</span> <span class="s2">"Hi, </span><span class="si">#{</span><span class="nb">name</span><span class="si">}</span><span class="s2">"</span>
<span class="k">end</span>
<span class="n">print_hi</span><span class="p">(</span><span class="s1">'Tom'</span><span class="p">)</span>
<span class="c1">#=&gt; prints 'Hi, Tom' to STDOUT.</span></code></pre></figure>]]></content><author><name></name></author><category term="jekyll" /><category term="update" /><summary type="html"><![CDATA[Thanks for visiting this site.]]></summary></entry><entry><title type="html">Helm install Redis cluster</title><link href="http://localhost:4000/jekyll/cat2/2023/11/09/redis.html" rel="alternate" type="text/html" title="Helm install Redis cluster" /><published>2023-11-09T11:15:29+11:00</published><updated>2023-11-09T11:15:29+11:00</updated><id>http://localhost:4000/jekyll/cat2/2023/11/09/redis</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2023/11/09/redis.html"><![CDATA[<p><b>Helm install Redis cluster</b></p>

<p>Here we use helm to install Redis cluster, then validate statefuleset storage and cluster avalibility</p>

<p>Typical Redis cluster (3 master + 3 slave for slots) Topology:</p>

<p><img src="/assets/redis-slot.png" alt="image tooltip here" /></p>

<ul>
  <li>Helm install bitnami/redis-cluster</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">helm repo add bitnami https://charts.bitnami.com/bitnami
helm pull bitnami/redis-cluster
kubectl create ns redis
helm <span class="nb">install </span>zz-redis bitnami/redis-cluster <span class="nt">-n</span> redis</code></pre></figure>

<ul>
  <li>redis-cluster status</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl get po | <span class="nb">grep </span>zz-redis
zz-redis-redis-cluster-0                                 1/1     Running   3 <span class="o">(</span>33m ago<span class="o">)</span>     36m
zz-redis-redis-cluster-1                                 1/1     Running   1 <span class="o">(</span>32m ago<span class="o">)</span>     36m
zz-redis-redis-cluster-2                                 1/1     Running   1 <span class="o">(</span>33m ago<span class="o">)</span>     36m
zz-redis-redis-cluster-3                                 1/1     Running   1 <span class="o">(</span>33m ago<span class="o">)</span>     36m
zz-redis-redis-cluster-4                                 1/1     Running   1 <span class="o">(</span>33m ago<span class="o">)</span>     36m
zz-redis-redis-cluster-5                                 1/1     Running   1 <span class="o">(</span>33m ago<span class="o">)</span>     36m

kubectl get svc
zz-redis-redis-cluster                    ClusterIP   10.96.68.34     &lt;none&gt;        6379/TCP                        37m
zz-redis-redis-cluster-headless           ClusterIP   None            &lt;none&gt;        6379/TCP,16379/TCP              37m

kubectl get pvc
NAME                                  STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE
redis-data-zz-redis-redis-cluster-0   Bound    pvc-81f69c15-2f59-4704-9fec-c3ab217ebca5   1Gi        RWO            rook-ceph-block   37m
redis-data-zz-redis-redis-cluster-1   Bound    pvc-871dbb68-a78b-48a8-8feb-8726eb8a795e   1Gi        RWO            rook-ceph-block   37m
redis-data-zz-redis-redis-cluster-2   Bound    pvc-afd8c82e-c314-426a-a3cd-3c8d10b42bb1   1Gi        RWO            rook-ceph-block   37m
redis-data-zz-redis-redis-cluster-3   Bound    pvc-e8fd5d47-dd60-4358-8cf5-a17d6574bbe2   1Gi        RWO            rook-ceph-block   37m
redis-data-zz-redis-redis-cluster-4   Bound    pvc-04d4f148-b7c1-407e-b9a8-b2fa911405f0   1Gi        RWO            rook-ceph-block   37m
redis-data-zz-redis-redis-cluster-5   Bound    pvc-99e8b2cc-c5d5-4636-a19b-042922eca3cc   1Gi        RWO            rook-ceph-block   37m</code></pre></figure>

<ul>
  <li>Validate cluster by set key</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl <span class="nb">exec</span> <span class="nt">-it</span> zz-redis-redis-cluster-0 <span class="nt">--</span> sh
redis-cli
info replication
cluster info
cluster nodes
054ff137e9530c0e4d8afd1d00162d01952580de 172.16.122.179:6379@16379 slave 2ebcfdf7e74aa8755250384f7efa466f4d18e9d4 0 1702703474000 3 connected
7cfeb1d88dc3838e600a32c1e233b1c5f05006f1 172.16.58.197:6379@16379 master - 0 1702703473000 2 connected 5461-10922
1e56bad62197062fad465bbcc6b625bea8364db2 172.16.58.224:6379@16379 slave 7cfeb1d88dc3838e600a32c1e233b1c5f05006f1 0 1702703474954 2 connected
7e539b2209581c8375f7fb0aa9eedf5b98754b05 172.16.85.252:6379@16379 slave 889515187dbbb525fd73dc840d5bcad78305645d 0 1702703473947 1 connected
889515187dbbb525fd73dc840d5bcad78305645d 172.16.195.10:6379@16379 myself,master - 0 1702703469000 1 connected 0-5460
2ebcfdf7e74aa8755250384f7efa466f4d18e9d4 172.16.85.229:6379@16379 master - 0 1702703473000 3 connected 10923-16383


127.0.0.1:6379&gt; <span class="nb">set </span>dad zack
OK
127.0.0.1:6379&gt; get dad
<span class="s2">"zack"</span>

kubectl <span class="nb">exec</span> <span class="nt">-it</span> zz-redis-redis-cluster-4 <span class="nt">--</span> sh
redis-cli
127.0.0.1:6379&gt; KEYS <span class="k">*</span>
1<span class="o">)</span> <span class="s2">"dad"</span></code></pre></figure>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[Helm install Redis cluster]]></summary></entry><entry><title type="html">Apache Kafka cluster install</title><link href="http://localhost:4000/jekyll/cat2/2023/11/09/kafka.html" rel="alternate" type="text/html" title="Apache Kafka cluster install" /><published>2023-11-09T11:15:29+11:00</published><updated>2023-11-09T11:15:29+11:00</updated><id>http://localhost:4000/jekyll/cat2/2023/11/09/kafka</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2023/11/09/kafka.html"><![CDATA[<p><b>Helm install Kafka </b></p>

<p>Here we use helm to install Kafka, then validate statefuleset storage and cluster avalibility by create topic, producer and consumer</p>

<p>Typical Redis cluster (3 master + 3 slave for slots) Topology:</p>

<p><img src="/assets/kafka.png" alt="image tooltip here" /></p>

<ul>
  <li>Helm install bitnami/redis-cluster</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">helm repo add bitnami https://charts.bitnami.com/bitnami
helm pull bitnami/kafka
kubectl create ns kafka
helm <span class="nb">install </span>zz-kafka <span class="nb">.</span> <span class="nt">-n</span> kafka</code></pre></figure>

<ul>
  <li>Kafka-cluster status</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl get all | <span class="nb">grep </span>zz-kaf
pod/zz-kafka-client                                          1/1     Running   0               6m27s
pod/zz-kafka-controller-0                                    1/1     Running   0               8m52s
pod/zz-kafka-controller-1                                    1/1     Running   0               8m52s
pod/zz-kafka-controller-2                                    1/1     Running   0               8m52s
service/zz-kafka                                  ClusterIP   10.96.58.62     &lt;none&gt;        9092/TCP                        8m52s
service/zz-kafka-controller-headless              ClusterIP   None            &lt;none&gt;        9094/TCP,9092/TCP,9093/TCP      8m52s
statefulset.apps/zz-kafka-controller                                    3/3     8m52s

kubectl get pvc
NAME                         STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE
data-zz-kafka-controller-0   Bound    pvc-f3831a5c-c9cf-46bb-a47d-58ea80f82e28   8Gi        RWO            rook-ceph-block   9m19s
data-zz-kafka-controller-1   Bound    pvc-a45fd063-7979-4c0d-8ae4-93b4b4b0bf7f   8Gi        RWO            rook-ceph-block   9m19s
data-zz-kafka-controller-2   Bound    pvc-ed48b71d-81be-4067-b05f-9e8dc64fab04   8Gi        RWO            rook-ceph-block   9m19s</code></pre></figure>

<ul>
  <li>Validate cluster by set key
create client.properties with SASL authentication details, copy to client</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl run zz-kafka-client <span class="nt">--restart</span><span class="o">=</span><span class="s1">'Never'</span> <span class="nt">--image</span> docker.io/bitnami/kafka:3.6.1-debian-11-r0 <span class="nt">--namespace</span> default <span class="nt">--command</span> <span class="nt">--</span> <span class="nb">sleep </span>infinity
kubectl <span class="nb">cp</span> <span class="nt">--namespace</span> default client.properties zz-kafka-client:/tmp/client.properties</code></pre></figure>

<p>open 2 bash window to access kafka client</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl <span class="nb">exec</span> <span class="nt">--tty</span> <span class="nt">-i</span> zz-kafka-client <span class="nt">--namespace</span> default <span class="nt">--</span> bash

window1:
    PRODUCER:
        kafka-console-producer.sh <span class="se">\</span>
            <span class="nt">--producer</span>.config /tmp/client.properties <span class="se">\</span>
            <span class="nt">--broker-list</span> zz-kafka-controller-0.zz-kafka-controller-headless.default.svc.cluster.local:9092,zz-kafka-controller-1.zz-kafka-controller-headless.default.svc.cluster.local:9092,zz-kafka-controller-2.zz-kafka-controller-headless.default.svc.cluster.local:9092 <span class="se">\</span>
            <span class="nt">--topic</span> <span class="nb">test

</span>window2:
    CONSUMER:
        kafka-console-consumer.sh <span class="se">\</span>
            <span class="nt">--consumer</span>.config /tmp/client.properties <span class="se">\</span>
            <span class="nt">--bootstrap-server</span> zz-kafka.default.svc.cluster.local:9092 <span class="se">\</span>
            <span class="nt">--topic</span> <span class="nb">test</span> <span class="se">\</span>
            <span class="nt">--from-beginning</span></code></pre></figure>

<p>test topic and PRODUCER with CONSUMER</p>

<p><img src="/assets/kafka-validation.png" alt="image tooltip here" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[Helm install Kafka]]></summary></entry><entry><title type="html">Rook-Ceph set dynamic pv and pvc</title><link href="http://localhost:4000/jekyll/cat2/2023/11/09/ceph.html" rel="alternate" type="text/html" title="Rook-Ceph set dynamic pv and pvc" /><published>2023-11-09T11:15:29+11:00</published><updated>2023-11-09T11:15:29+11:00</updated><id>http://localhost:4000/jekyll/cat2/2023/11/09/ceph</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2023/11/09/ceph.html"><![CDATA[<p><b>Helm install Rook-Ceph for persistent storage</b></p>

<ul>
  <li>
    <p>Configure local VM block storage to add 50Gb sdb to all k8s master and work nodes</p>
  </li>
  <li>
    <p>install rook-ceph cluster</p>
  </li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">git clone <span class="nt">--single-branch</span> <span class="nt">--branch</span> master https://github.com/rook/rook.git
<span class="nb">cd </span>rook/deploy/examples
kubectl create <span class="nt">-f</span> crds.yaml <span class="nt">-f</span> common.yaml <span class="nt">-f</span> operator.yaml
kubectl create <span class="nt">-f</span> cluster.yaml</code></pre></figure>

<ul>
  <li>Ceph toolbox to check cluster status</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl create <span class="nt">-f</span> toolbox.yaml
kubectl <span class="nt">-n</span> rook-ceph <span class="nb">exec</span> <span class="nt">-it</span> deploy/rook-ceph-tools <span class="nt">--</span> bash
ceph status
ceph osd status
ceph <span class="nb">df
</span>rados <span class="nb">df</span></code></pre></figure>

<ul>
  <li>Ceph Dashboard svc for https login</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl create <span class="nt">-f</span> dashboard-external-https.yaml
kubectl patch svc rook-ceph-mgr-dashboard-external-https <span class="nt">-p</span> <span class="s1">'{"spec": {"ports": {"type": "LoadBalancer"}}}'</span>
kubectl <span class="nt">-n</span> rook-ceph get secret rook-ceph-dashboard-password <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">"{['data']['password']}"</span> | <span class="nb">base64</span> <span class="nt">--decode</span> <span class="o">&amp;&amp;</span> <span class="nb">echo</span></code></pre></figure>

<ul>
  <li>Create storage pool and storageclass</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nb">cd </span>csi/rbd
kubectl create <span class="nt">-f</span> storageclass.yaml</code></pre></figure>

<ul>
  <li>set “rook-ceph-block” as default sc</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl patch storageclass rook-ceph-block <span class="nt">-p</span> <span class="s1">'{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'</span>

kubectl get sc
NAME                        PROVISIONER                  RECLAIMPOLICY  VOLUMEBINDINGMODE  ALLOWVOLUMEEXPANSION   AGE
rook-ceph-block <span class="o">(</span>default<span class="o">)</span>   rook-ceph.rbd.csi.ceph.com   Delete          Immediate          <span class="nb">true                  </span>8d</code></pre></figure>

<p><b>Helm install Redis cluster</b></p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">helm repo add bitnami https://charts.bitnami.com/bitnami
helm pull bitnami/redis-cluster
kubectl create ns redis
helm <span class="nb">install </span>zz-redis bitnami/redis-cluster <span class="nt">-n</span> redis

kubectl get po | <span class="nb">grep </span>zz-redis
zz-redis-redis-cluster-0                                 1/1     Running   3 <span class="o">(</span>33m ago<span class="o">)</span>     36m
zz-redis-redis-cluster-1                                 1/1     Running   1 <span class="o">(</span>32m ago<span class="o">)</span>     36m
zz-redis-redis-cluster-2                                 1/1     Running   1 <span class="o">(</span>33m ago<span class="o">)</span>     36m
zz-redis-redis-cluster-3                                 1/1     Running   1 <span class="o">(</span>33m ago<span class="o">)</span>     36m
zz-redis-redis-cluster-4                                 1/1     Running   1 <span class="o">(</span>33m ago<span class="o">)</span>     36m
zz-redis-redis-cluster-5                                 1/1     Running   1 <span class="o">(</span>33m ago<span class="o">)</span>     36m

kubectl get pvc
zz-redis-redis-cluster                    ClusterIP   10.96.68.34     &lt;none&gt;        6379/TCP                        37m
zz-redis-redis-cluster-headless           ClusterIP   None            &lt;none&gt;        6379/TCP,16379/TCP              37m



kubectl get pvc
NAME                                  STATUS   VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS      AGE
redis-data-zz-redis-redis-cluster-0   Bound    pvc-81f69c15-2f59-4704-9fec-c3ab217ebca5   1Gi        RWO            rook-ceph-block   37m
redis-data-zz-redis-redis-cluster-1   Bound    pvc-871dbb68-a78b-48a8-8feb-8726eb8a795e   1Gi        RWO            rook-ceph-block   37m
redis-data-zz-redis-redis-cluster-2   Bound    pvc-afd8c82e-c314-426a-a3cd-3c8d10b42bb1   1Gi        RWO            rook-ceph-block   37m
redis-data-zz-redis-redis-cluster-3   Bound    pvc-e8fd5d47-dd60-4358-8cf5-a17d6574bbe2   1Gi        RWO            rook-ceph-block   37m
redis-data-zz-redis-redis-cluster-4   Bound    pvc-04d4f148-b7c1-407e-b9a8-b2fa911405f0   1Gi        RWO            rook-ceph-block   37m
redis-data-zz-redis-redis-cluster-5   Bound    pvc-99e8b2cc-c5d5-4636-a19b-042922eca3cc   1Gi        RWO            rook-ceph-block   37m

kubectl <span class="nb">exec</span> <span class="nt">-it</span> zz-redis-redis-cluster-0 <span class="nt">--</span> sh
redis-cli
info replication
cluster info
cluster nodes
054ff137e9530c0e4d8afd1d00162d01952580de 172.16.122.179:6379@16379 slave 2ebcfdf7e74aa8755250384f7efa466f4d18e9d4 0 1702703474000 3 connected
7cfeb1d88dc3838e600a32c1e233b1c5f05006f1 172.16.58.197:6379@16379 master - 0 1702703473000 2 connected 5461-10922
1e56bad62197062fad465bbcc6b625bea8364db2 172.16.58.224:6379@16379 slave 7cfeb1d88dc3838e600a32c1e233b1c5f05006f1 0 1702703474954 2 connected
7e539b2209581c8375f7fb0aa9eedf5b98754b05 172.16.85.252:6379@16379 slave 889515187dbbb525fd73dc840d5bcad78305645d 0 1702703473947 1 connected
889515187dbbb525fd73dc840d5bcad78305645d 172.16.195.10:6379@16379 myself,master - 0 1702703469000 1 connected 0-5460
2ebcfdf7e74aa8755250384f7efa466f4d18e9d4 172.16.85.229:6379@16379 master - 0 1702703473000 3 connected 10923-16383


127.0.0.1:6379&gt; <span class="nb">set </span>dad zack
OK
127.0.0.1:6379&gt; get dad
<span class="s2">"zack"</span>

kubectl <span class="nb">exec</span> <span class="nt">-it</span> zz-redis-redis-cluster-4 <span class="nt">--</span> sh
redis-cli
127.0.0.1:6379&gt; KEYS <span class="k">*</span>
1<span class="o">)</span> <span class="s2">"dad"</span></code></pre></figure>

<p><b>Helm install Kafka</b></p>

<p><b>Helm install RabbitMQ</b></p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[Helm install Rook-Ceph for persistent storage]]></summary></entry><entry><title type="html">Argo CD sync K8S deployment with Github</title><link href="http://localhost:4000/jekyll/cat2/2023/11/07/ArgoCD.html" rel="alternate" type="text/html" title="Argo CD sync K8S deployment with Github" /><published>2023-11-07T11:15:29+11:00</published><updated>2023-11-07T11:15:29+11:00</updated><id>http://localhost:4000/jekyll/cat2/2023/11/07/ArgoCD</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2023/11/07/ArgoCD.html"><![CDATA[<p>Topic</p>

<p><b>Argo CD sync local K8S deployment with Github manifest</b></p>

<p>Argo CD is a declarative, GitOps continuous delivery tool for Kubernetes applications. This is a post to show how enable Argo CD on local k8s and AWS EKS, deploy application and sync with github manifest</p>

<ul>
  <li>Argo CD install ingress controller ingress-nginx</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl create namespace argocd
kubectl apply <span class="nt">-n</span> argocd <span class="nt">-f</span> https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml</code></pre></figure>

<ul>
  <li>Download and install Argo CD CLI</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">curl <span class="nt">-sSL</span> <span class="nt">-o</span> argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
<span class="nb">sudo install</span> <span class="nt">-m</span> 555 argocd-linux-amd64 /usr/local/bin/argocd
<span class="nb">rm </span>argocd-linux-amd64</code></pre></figure>

<ul>
  <li>configure Argo CD API Server and deploy zackweb</li>
</ul>

<p>Change the argocd-server service type to NodePort, init admin passwd and deploy “zackweb” via argocd application manifests (argo-zackweb-application.yaml)</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl patch svc argocd-server <span class="nt">-n</span> argocd <span class="nt">-p</span> <span class="s1">'{"spec": {"type": "NodePort"}}'</span>
argocd admin initial-password <span class="nt">-n</span> argocd
kubectl create <span class="nt">-f</span> argo-zackweb-application.yaml</code></pre></figure>

<p>argo-zackweb-application.yaml</p>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">argoproj.io/v1alpha1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Application</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">zackweb</span>
  <span class="na">namespace</span><span class="pi">:</span> <span class="s">argocd</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">destination</span><span class="pi">:</span>
    <span class="na">namespace</span><span class="pi">:</span> <span class="s1">'</span><span class="s">zackweb'</span>
    <span class="na">server</span><span class="pi">:</span> <span class="s1">'</span><span class="s">https://kubernetes.default.svc'</span>
  <span class="na">source</span><span class="pi">:</span>
    <span class="na">path</span><span class="pi">:</span> <span class="s">eks-deploy</span>
    <span class="na">repoURL</span><span class="pi">:</span> <span class="s1">'</span><span class="s">https://github.com/ZackZhouHB/zack-gitops-project'</span>
    <span class="na">targetRevision</span><span class="pi">:</span> <span class="s">editing</span>
  <span class="na">project</span><span class="pi">:</span> <span class="s">default</span>
  <span class="na">syncPolicy</span><span class="pi">:</span>
    <span class="na">automated</span><span class="pi">:</span>
      <span class="na">prune</span><span class="pi">:</span> <span class="kc">true</span>
      <span class="na">selfHeal</span><span class="pi">:</span> <span class="kc">true</span>
    <span class="na">syncOptions</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">CreateNamespace=true</span></code></pre></figure>

<ul>
  <li>access to argocd UI check for sync</li>
</ul>

<p><img src="/assets/argo-demo.png" alt="image tooltip here" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[Topic]]></summary></entry><entry><title type="html">Ingress-nginx Routing for local DNS</title><link href="http://localhost:4000/jekyll/cat2/2023/11/06/ingresscontroller.html" rel="alternate" type="text/html" title="Ingress-nginx Routing for local DNS" /><published>2023-11-06T11:15:29+11:00</published><updated>2023-11-06T11:15:29+11:00</updated><id>http://localhost:4000/jekyll/cat2/2023/11/06/ingresscontroller</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2023/11/06/ingresscontroller.html"><![CDATA[<p>Topic</p>

<p><b>Ingress-nginx Routing for local DNS (zz.local)</b></p>

<ul>
  <li>helm install ingress controller ingress-nginx</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update
helm <span class="nt">-n</span> ingress-nginx <span class="nb">install </span>ingress-nginx ingress-nginx/ingress-nginx <span class="nt">--create-namespace</span></code></pre></figure>

<ul>
  <li>create ingress to route root path to “zz.local” for “zackweb-service”</li>
</ul>

<figure class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="na">apiVersion</span><span class="pi">:</span> <span class="s">networking.k8s.io/v1</span>
<span class="na">kind</span><span class="pi">:</span> <span class="s">Ingress</span>
<span class="na">metadata</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">nginx-ingress</span>
<span class="na">spec</span><span class="pi">:</span>
  <span class="na">rules</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="na">host</span><span class="pi">:</span> <span class="s">zz.local</span> 
    <span class="na">http</span><span class="pi">:</span>
      <span class="na">paths</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">path</span><span class="pi">:</span> <span class="s">/</span>
        <span class="na">pathType</span><span class="pi">:</span> <span class="s">ImplementationSpecific</span>
        <span class="na">backend</span><span class="pi">:</span>
          <span class="na">service</span><span class="pi">:</span>
            <span class="na">name</span><span class="pi">:</span> <span class="s">zackweb-service</span>
            <span class="na">port</span><span class="pi">:</span>
              <span class="na">number</span><span class="pi">:</span> <span class="s">80</span></code></pre></figure>

<ul>
  <li>Browser visit “zz.local”</li>
</ul>

<p><img src="/assets/web.png" alt="image tooltip here" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[Topic]]></summary></entry><entry><title type="html">About Zackweb Gitops project!</title><link href="http://localhost:4000/jekyll/cat2/2023/11/02/about-this-project.html" rel="alternate" type="text/html" title="About Zackweb Gitops project!" /><published>2023-11-02T11:15:29+11:00</published><updated>2023-11-02T11:15:29+11:00</updated><id>http://localhost:4000/jekyll/cat2/2023/11/02/about-this-project</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2023/11/02/about-this-project.html"><![CDATA[<p><b>Project Introduction</b></p>

<p>This is my first web blog using Jekyll, as an pratical way by following <a href="https://cloudresumechallenge.dev/docs/the-challenge/aws/">Cloud Resume Challange</a> to build my cloud and devops concept and technical skillsets.</p>

<p><b>The Design</b></p>

<p>By design, I will create:</p>

<ul>
  <li>
    <p>a web blog <a href="http://zackdevops.online">Zack’s Tech Stack</a> : with content and details to introduce myself</p>
  </li>
  <li>
    <p>a github repo <a href="https://github.com/ZackZhouHB/zack-gitops-project">zack-gitops-project</a>: to source control all code that I build and run locally by “jekyll serve”, validate site and pages, then push the source code to github.</p>
  </li>
  <li>
    <p>a Dockerfile to build jekyll code into a docker image running by nginx/alpine</p>
  </li>
  <li>
    <p>3 folder with manifest for staging and prod webapp deploy:</p>
  </li>
</ul>

<p><ins> /terrafom</ins>  for create AWS VPC and EKS to host website as production environment;</p>

<p><ins> /k8s-local-deploy</ins>  for website image deploy to local K8S as testing;</p>

<p><ins> /eks-deploy</ins>  for prod deployment with ArgoCD application manifest</p>

<ul>
  <li>
    <p>a EC2 instance: as staging env for AWS with Godaddy domain hosting test</p>
  </li>
  <li>
    <p>a EKS cluster:  as PROD environment to validate ArgoCD sync for web deployment</p>
  </li>
</ul>

<p><b>The Archetecture</b></p>

<p><img src="/assets/aws-ar.png" alt="image tooltip here" /></p>

<p>This is the design of CICD pipeline in GitHub Action workflow to auto build docker images for this website every time I make code change and commit to my git repo  <a href="https://github.com/ZackZhouHB/zack-gitops-project">zack-gitops-project</a>  [Branch : editing]</p>

<p><img src="/assets/cicd.png" alt="image tooltip here" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[Project Introduction]]></summary></entry></feed>