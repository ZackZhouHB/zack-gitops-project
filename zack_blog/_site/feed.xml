<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-06-26T16:24:20+10:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Zack’s Blog</title><subtitle>## AWS   ## Jenkins  ## Microservices ## Automation ## K8S   ## CICD     ## Gitops </subtitle><entry><title type="html">Automate Package Deployment via AWS System Manager</title><link href="http://localhost:4000/jekyll/cat2/2024/06/23/aws-ssm.html" rel="alternate" type="text/html" title="Automate Package Deployment via AWS System Manager" /><published>2024-06-23T10:15:29+10:00</published><updated>2024-06-23T10:15:29+10:00</updated><id>http://localhost:4000/jekyll/cat2/2024/06/23/aws-ssm</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2024/06/23/aws-ssm.html"><![CDATA[<p><b>The task</b></p>

<p>Recently we got a task from the Company’s security team, to install 2 security agents which will be used to perform centralized security scans for all active AWS EC2 instances. here I will see how to use AWS Systems Manager for software distribution and installation for multiple AWS accounts and infrastructure at scale.</p>

<p>SSM features will be used :</p>

<ul>
  <li><b>Session Manager</b>: ensure the EC2 instance has the SSM Agent installed and running and The instances need an IAM role with at least the <code class="language-plaintext highlighter-rouge">AmazonSSMManagedInstanceCore</code> policy attached  </li>
  <li><b>Run Command</b>: send command and execute security agent software package installation scripts and command to varify post-installation status on remote instances for task automation</li>
</ul>

<p>Prerequisites:</p>
<ul>
  <li>
    <p><b>AWSCLI</b>: programatically manage all the operation bellow.</p>
  </li>
  <li>
    <p><b>SSM Agent</b>: Ensure the SSM Agent is installed and running on all EC2 instances. Most Amazon Machine Images (AMIs) have the SSM Agent pre-installed.</p>
  </li>
  <li>
    <p><b>IAM Role</b>: Attach an IAM role to each instance with the AmazonSSMManagedInstanceCore policy.</p>
  </li>
</ul>

<p>Create and attach IAM role to EC2 instance for SSM to be able to perform action:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="o">[</span>cloudshell-user@ip-10-134-56-72 ~]<span class="nv">$ </span>vim trust-policy.json

<span class="o">{</span>
 <span class="s2">"Version"</span>: <span class="s2">"2012-10-17"</span>,
 <span class="s2">"Statement"</span>: <span class="o">[</span>
 <span class="o">{</span>
 <span class="s2">"Effect"</span>: <span class="s2">"Allow"</span>,
 <span class="s2">"Principal"</span>: <span class="o">{</span>
 <span class="s2">"Service"</span>: <span class="s2">"ec2.amazonaws.com"</span>
 <span class="o">}</span>,
 <span class="s2">"Action"</span>: <span class="s2">"sts:AssumeRole"</span>
 <span class="o">}</span>
 <span class="o">]</span>
<span class="o">}</span>

<span class="o">[</span>cloudshell-user@ip-10-134-56-72 ~]<span class="nv">$ </span>aws iam create-role <span class="nt">--role-name</span> SSMAccessRole <span class="nt">--assume-role-policy-document</span> file://trust-policy.json
<span class="o">{</span>
 <span class="s2">"Role"</span>: <span class="o">{</span>
 <span class="s2">"Path"</span>: <span class="s2">"/"</span>,
 <span class="s2">"RoleName"</span>: <span class="s2">"SSMAccessRole"</span>,
 <span class="s2">"RoleId"</span>: <span class="s2">"AROA4MTWLTSHKK3QL3NOU"</span>,
 <span class="s2">"Arn"</span>: <span class="s2">"arn:aws:iam::85xxxxxx1342:role/SSMAccessRole"</span>,
 <span class="s2">"CreateDate"</span>: <span class="s2">"2024-06-25T00:29:07+00:00"</span>,
 <span class="s2">"AssumeRolePolicyDocument"</span>: <span class="o">{</span>
 <span class="s2">"Version"</span>: <span class="s2">"2012-10-17"</span>,
 <span class="s2">"Statement"</span>: <span class="o">[</span>
 <span class="o">{</span>
 <span class="s2">"Effect"</span>: <span class="s2">"Allow"</span>,
 <span class="s2">"Principal"</span>: <span class="o">{</span>
 <span class="s2">"Service"</span>: <span class="s2">"ec2.amazonaws.com"</span>
 <span class="o">}</span>,
 <span class="s2">"Action"</span>: <span class="s2">"sts:AssumeRole"</span>
 <span class="o">}</span>
 <span class="o">]</span>
 <span class="o">}</span>
 <span class="o">}</span>
<span class="o">}</span>

<span class="o">[</span>cloudshell-user@ip-10-134-56-72 ~]<span class="nv">$ </span>aws iam attach-role-policy <span class="nt">--role-name</span> SSMAccessRole <span class="nt">--policy-arn</span> arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

<span class="o">[</span>cloudshell-user@ip-10-134-56-72 ~]<span class="nv">$ </span>aws iam create-instance-profile <span class="nt">--instance-profile-name</span> SSMInstanceProfile
<span class="o">{</span>
 <span class="s2">"InstanceProfile"</span>: <span class="o">{</span>
 <span class="s2">"Path"</span>: <span class="s2">"/"</span>,
 <span class="s2">"InstanceProfileName"</span>: <span class="s2">"SSMInstanceProfile"</span>,
 <span class="s2">"InstanceProfileId"</span>: <span class="s2">"AIPA4MTWLTSHF7KJRFLYC"</span>,
 <span class="s2">"Arn"</span>: <span class="s2">"arn:aws:iam::851xxxxxxx42:instance-profile/SSMInstanceProfile"</span>,
 <span class="s2">"CreateDate"</span>: <span class="s2">"2024-06-25T00:31:25+00:00"</span>,
 <span class="s2">"Roles"</span>: <span class="o">[]</span>
 <span class="o">}</span>
<span class="o">}</span>

<span class="o">[</span>cloudshell-user@ip-10-134-56-72 ~]<span class="nv">$ INSTANCE_IDS</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-instances <span class="nt">--query</span> <span class="s2">"Reservations[*].Instances[*].InstanceId"</span> <span class="nt">--output</span> text<span class="si">)</span>
<span class="k">for </span>INSTANCE_ID <span class="k">in</span> <span class="nv">$INSTANCE_IDS</span><span class="p">;</span> <span class="k">do</span>
<span class="o">&gt;</span> aws ec2 associate-iam-instance-profile <span class="nt">--instance-id</span> <span class="nv">$INSTANCE_ID</span> <span class="nt">--iam-instance-profile</span> <span class="nv">Name</span><span class="o">=</span>SSMInstanceProfile
<span class="o">&gt;</span> <span class="k">done</span>

<span class="o">{</span>
 <span class="s2">"IamInstanceProfileAssociation"</span>: <span class="o">{</span>
 <span class="s2">"AssociationId"</span>: <span class="s2">"iip-assoc-04e81626bf6bcd9b5"</span>,
 <span class="s2">"InstanceId"</span>: <span class="s2">"i-0762xxxxxxxcf2"</span>,
 <span class="s2">"IamInstanceProfile"</span>: <span class="o">{</span>
 <span class="s2">"Arn"</span>: <span class="s2">"arn:aws:iam::8517xxxxxxx42:instance-profile/SSMInstanceProfile"</span>,
 <span class="s2">"Id"</span>: <span class="s2">"AIPA4MTWLTSHF7KJRFLYC"</span>
 <span class="o">}</span>,
 <span class="s2">"State"</span>: <span class="s2">"associating"</span>
 <span class="o">}</span>
<span class="o">}</span>
<span class="o">{</span>
 <span class="s2">"IamInstanceProfileAssociation"</span>: <span class="o">{</span>
 <span class="s2">"AssociationId"</span>: <span class="s2">"iip-assoc-09233165b3a53ca68"</span>,
 <span class="s2">"InstanceId"</span>: <span class="s2">"i-01a2xxxxxx048c"</span>,
 <span class="s2">"IamInstanceProfile"</span>: <span class="o">{</span>
 <span class="s2">"Arn"</span>: <span class="s2">"arn:aws:iam::851xxxx42:instance-profile/SSMInstanceProfile"</span>,
 <span class="s2">"Id"</span>: <span class="s2">"AIPA4MTWLTSHF7KJRFLYC"</span>
 <span class="o">}</span>,
 <span class="s2">"State"</span>: <span class="s2">"associating"</span>
 <span class="o">}</span>
<span class="o">}</span>
<span class="o">{</span>
 <span class="s2">"IamInstanceProfileAssociation"</span>: <span class="o">{</span>
 <span class="s2">"AssociationId"</span>: <span class="s2">"iip-assoc-09236a8ee456e39cd"</span>,
 <span class="s2">"InstanceId"</span>: <span class="s2">"i-07axxxxxxb823"</span>,
 <span class="s2">"IamInstanceProfile"</span>: <span class="o">{</span>
 <span class="s2">"Arn"</span>: <span class="s2">"arn:aws:iam::85xxxxxxx42:instance-profile/SSMInstanceProfile"</span>,
 <span class="s2">"Id"</span>: <span class="s2">"AIPA4MTWLTSHF7KJRFLYC"</span>
 <span class="o">}</span>,
 <span class="s2">"State"</span>: <span class="s2">"associating"</span>
 <span class="o">}</span>
<span class="o">}</span>

<span class="o">[</span>cloudshell-user@ip-10-134-56-72 ~]<span class="nv">$ </span>aws ssm describe-instance-information</code></pre></figure>

<p>Now verify from session manager to see if instances are there:</p>

<p><img src="/assets/ssm1.png" alt="image tooltip here" /></p>

<ul>
  <li>Tag Instances</li>
</ul>

<p>Tag EC2 instances to identify which instances need the security agent to be installed:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nv">Key</span><span class="o">=</span>InstallSecurityAgent, <span class="nv">Value</span><span class="o">=</span>True.</code></pre></figure>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># List all instance IDs</span>
<span class="nv">INSTANCE_IDS</span><span class="o">=</span><span class="si">$(</span>aws ec2 describe-instances <span class="nt">--query</span> <span class="s2">"Reservations[*].Instances[*].InstanceId"</span> <span class="nt">--output</span> text<span class="si">)</span>

<span class="c"># Tag all instances with Key=InstallSecurityAgent and Value=True</span>
<span class="k">for </span>INSTANCE_ID <span class="k">in</span> <span class="nv">$INSTANCE_IDS</span><span class="p">;</span> <span class="k">do
 </span>aws ec2 create-tags <span class="nt">--resources</span> <span class="nv">$INSTANCE_ID</span> <span class="nt">--tags</span> <span class="nv">Key</span><span class="o">=</span>InstallSecurityAgent,Value<span class="o">=</span>True
<span class="k">done</span></code></pre></figure>

<ul>
  <li>SSM Run Command to Create a custom SSM document that contains the script to install the security agent</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="o">[</span>cloudshell-user@ip-10-134-56-72 ~]<span class="nv">$ </span>vim install_security_agent.json
<span class="o">{</span>
 <span class="s2">"schemaVersion"</span>: <span class="s2">"2.2"</span>,
 <span class="s2">"description"</span>: <span class="s2">"Install Security Agent"</span>,
 <span class="s2">"mainSteps"</span>: <span class="o">[</span>
 <span class="o">{</span>
 <span class="s2">"action"</span>: <span class="s2">"aws:runShellScript"</span>,
 <span class="s2">"name"</span>: <span class="s2">"installSecurityAgent"</span>,
 <span class="s2">"inputs"</span>: <span class="o">{</span>
 <span class="s2">"runCommand"</span>: <span class="o">[</span>
 <span class="s2">"curl -o /tmp/security-agent-installer.sh https://github.com/ZackZhouHB/zack-gitops-project/blob/editing/Python_scripts/security-agent-installer.sh"</span>,
 <span class="s2">"chmod +x /tmp/security-agent-installer.sh"</span>,
 <span class="s2">"/tmp/security-agent-installer.sh"</span>
 <span class="o">]</span>
 <span class="o">}</span>
 <span class="o">}</span>
 <span class="o">]</span>
<span class="o">}</span></code></pre></figure>

<p>Create Document to execute the installation script on all tagged instances.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="o">[</span>cloudshell-user@ip-10-134-56-72 ~]<span class="nv">$ </span>aws ssm create-document <span class="se">\</span>
 <span class="nt">--name</span> <span class="s2">"InstallSecurityAgent"</span> <span class="se">\</span>
 <span class="nt">--document-type</span> <span class="s2">"Command"</span> <span class="se">\</span>
 <span class="nt">--content</span> file://install_security_agent.json

<span class="o">{</span>
 <span class="s2">"DocumentDescription"</span>: <span class="o">{</span>
 <span class="s2">"Hash"</span>: <span class="s2">"9e17a699d2d987134eb05f6b49a7c837161320b0ed42635b07928acc557970b5"</span>,
 <span class="s2">"HashType"</span>: <span class="s2">"Sha256"</span>,
 <span class="s2">"Name"</span>: <span class="s2">"InstallSecurityAgent"</span>,
 <span class="s2">"Owner"</span>: <span class="s2">"851725491342"</span>,
 <span class="s2">"CreatedDate"</span>: <span class="s2">"2024-06-25T01:51:36.666000+00:00"</span>,
 <span class="s2">"Status"</span>: <span class="s2">"Creating"</span>,
 <span class="s2">"DocumentVersion"</span>: <span class="s2">"1"</span>,
 <span class="s2">"Description"</span>: <span class="s2">"Install Security Agent"</span>,
 <span class="s2">"PlatformTypes"</span>: <span class="o">[</span>
 <span class="s2">"Linux"</span>,
 <span class="s2">"MacOS"</span>
 <span class="o">]</span>,
 <span class="s2">"DocumentType"</span>: <span class="s2">"Command"</span>,
 <span class="s2">"SchemaVersion"</span>: <span class="s2">"2.2"</span>,
 <span class="s2">"LatestVersion"</span>: <span class="s2">"1"</span>,
 <span class="s2">"DefaultVersion"</span>: <span class="s2">"1"</span>,
 <span class="s2">"DocumentFormat"</span>: <span class="s2">"JSON"</span>,
 <span class="s2">"Tags"</span>: <span class="o">[]</span>
 <span class="o">}</span>
<span class="o">}</span>

<span class="o">[</span>cloudshell-user@ip-10-132-90-150 ~]<span class="nv">$ </span>aws ssm send-command <span class="se">\</span>
<span class="o">&gt;</span> <span class="nt">--document-name</span> <span class="s2">"InstallSecurityAgent"</span> <span class="se">\</span>
<span class="o">&gt;</span> <span class="nt">--targets</span> <span class="s2">"Key=tag:InstallSecurityAgent,Values=True"</span> <span class="se">\</span>
<span class="o">&gt;</span> <span class="nt">--comment</span> <span class="s2">"Installing security agent on all instances with the specified tag"</span> <span class="se">\</span>
<span class="o">&gt;</span> <span class="nt">--max-concurrency</span> <span class="s2">"50"</span> <span class="se">\</span>
<span class="o">&gt;</span> <span class="nt">--max-errors</span> <span class="s2">"0"</span> <span class="se">\</span>
<span class="o">&gt;</span> <span class="nt">--region</span> ap-southeast-2
<span class="o">{</span>
 <span class="s2">"Command"</span>: <span class="o">{</span>
 <span class="s2">"CommandId"</span>: <span class="s2">"edfc9e9b-5e74-4660-8335-a98eb48251f7"</span>,
 <span class="s2">"DocumentName"</span>: <span class="s2">"InstallSecurityAgent"</span>,
 <span class="s2">"DocumentVersion"</span>: <span class="s2">"</span><span class="nv">$DEFAULT</span><span class="s2">"</span>,
 <span class="s2">"Comment"</span>: <span class="s2">"Installing security agent on all instances with the specified tag"</span>,
 <span class="s2">"ExpiresAfter"</span>: <span class="s2">"2024-06-25T04:03:44.665000+00:00"</span>,
 <span class="s2">"Parameters"</span>: <span class="o">{}</span>,
 <span class="s2">"InstanceIds"</span>: <span class="o">[]</span>,
 <span class="s2">"Targets"</span>: <span class="o">[</span>
 <span class="o">{</span>
 <span class="s2">"Key"</span>: <span class="s2">"tag:InstallSecurityAgent"</span>,
 <span class="s2">"Values"</span>: <span class="o">[</span>
 <span class="s2">"True"</span>
 <span class="o">]</span>
 <span class="o">}</span>
 <span class="o">]</span>,
 <span class="s2">"RequestedDateTime"</span>: <span class="s2">"2024-06-25T02:03:44.665000+00:00"</span>,
 <span class="s2">"Status"</span>: <span class="s2">"Pending"</span>,
 <span class="s2">"StatusDetails"</span>: <span class="s2">"Pending"</span>,
 <span class="s2">"OutputS3Region"</span>: <span class="s2">"ap-southeast-2"</span>,
 <span class="s2">"OutputS3BucketName"</span>: <span class="s2">""</span>,
 <span class="s2">"OutputS3KeyPrefix"</span>: <span class="s2">""</span>,
 <span class="s2">"MaxConcurrency"</span>: <span class="s2">"50"</span>,
 <span class="s2">"MaxErrors"</span>: <span class="s2">"0"</span>,
 <span class="s2">"TargetCount"</span>: 0,
 <span class="s2">"CompletedCount"</span>: 0,
 <span class="s2">"ErrorCount"</span>: 0,
 <span class="s2">"DeliveryTimedOutCount"</span>: 0,
 <span class="s2">"ServiceRole"</span>: <span class="s2">""</span>,
 <span class="s2">"NotificationConfig"</span>: <span class="o">{</span>
 <span class="s2">"NotificationArn"</span>: <span class="s2">""</span>,
 <span class="s2">"NotificationEvents"</span>: <span class="o">[]</span>,
 <span class="s2">"NotificationType"</span>: <span class="s2">""</span>
 <span class="o">}</span>,
 <span class="s2">"CloudWatchOutputConfig"</span>: <span class="o">{</span>
 <span class="s2">"CloudWatchLogGroupName"</span>: <span class="s2">""</span>,
 <span class="s2">"CloudWatchOutputEnabled"</span>: <span class="nb">false</span>
 <span class="o">}</span>,
 <span class="s2">"TimeoutSeconds"</span>: 3600,
 <span class="s2">"AlarmConfiguration"</span>: <span class="o">{</span>
 <span class="s2">"IgnorePollAlarmFailure"</span>: <span class="nb">false</span>,
 <span class="s2">"Alarms"</span>: <span class="o">[]</span>
 <span class="o">}</span>,
 <span class="s2">"TriggeredAlarms"</span>: <span class="o">[]</span>
 <span class="o">}</span>
<span class="o">}</span>
<span class="o">(</span>END<span class="o">)</span></code></pre></figure>

<p>Validate from Run Command console for the installation:
<img src="/assets/ssm2.png" alt="image tooltip here" /></p>

<p>Create an SSM Document to Check the package installation status:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="o">[</span>cloudshell-user@ip-10-134-56-72 ~]<span class="nv">$ </span>vim verify.json

<span class="o">{</span>
 <span class="s2">"schemaVersion"</span>: <span class="s2">"2.2"</span>,
 <span class="s2">"description"</span>: <span class="s2">"Install Security Agent"</span>,
 <span class="s2">"mainSteps"</span>: <span class="o">[</span>
 <span class="o">{</span>
 <span class="s2">"action"</span>: <span class="s2">"aws:runShellScript"</span>,
 <span class="s2">"name"</span>: <span class="s2">"installSecurityAgent"</span>,
 <span class="s2">"inputs"</span>: <span class="o">{</span>
 <span class="s2">"runCommand"</span>: <span class="o">[</span>
 <span class="s2">"apt list --installed | grep nfs-common"</span>,
 <span class="s2">"apt list --installed | grep lrzsz"</span>
 <span class="o">]</span>
 <span class="o">}</span>
 <span class="o">}</span>
 <span class="o">]</span>
<span class="o">}</span></code></pre></figure>

<p>Create this document using the AWS CLI:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="o">[</span>cloudshell-user@ip-10-134-56-72 ~]<span class="nv">$ </span>aws ssm create-document <span class="se">\</span>
 <span class="nt">--name</span> <span class="s2">"VerifyPackageInstallation"</span> <span class="se">\</span>
 <span class="nt">--document-type</span> <span class="s2">"Command"</span> <span class="se">\</span>
 <span class="nt">--content</span> file://verify.json

<span class="o">[</span>cloudshell-user@ip-10-134-56-72 ~]<span class="nv">$ </span>aws ssm send-command <span class="se">\</span>
 <span class="nt">--document-name</span> <span class="s2">"VerifyPackageInstallation"</span> <span class="se">\</span>
 <span class="nt">--targets</span> <span class="s2">"Key=tag:InstallSecurityAgent,Values=True"</span> <span class="se">\</span>
 <span class="nt">--comment</span> <span class="s2">"Check if Packages installed on all instances"</span> <span class="se">\</span>
 <span class="nt">--max-concurrency</span> <span class="s2">"50"</span> <span class="se">\</span>
 <span class="nt">--max-errors</span> <span class="s2">"0"</span> <span class="se">\</span>
 <span class="nt">--region</span> ap-southeast-2</code></pre></figure>

<p>Verify both “nfs-common” and “lrzsz”, we have 3 machines with “nfs-common” installed, and 2 instances with Ubuntu24.04 which did not get “lrzsz” installed.</p>

<p><img src="/assets/ssm3.png" alt="image tooltip here" /></p>

<p><img src="/assets/ssm4.png" alt="image tooltip here" /></p>

<p><b> Conclusion</b></p>

<p>So now we can use AWS CLI and AWS System Manager to automate software deployment and verify the installation status.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[The task]]></summary></entry><entry><title type="html">Back to Qin</title><link href="http://localhost:4000/jekyll/cat2/2024/06/20/backtoqin2.html" rel="alternate" type="text/html" title="Back to Qin" /><published>2024-06-20T10:15:29+10:00</published><updated>2024-06-20T10:15:29+10:00</updated><id>http://localhost:4000/jekyll/cat2/2024/06/20/backtoqin2</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2024/06/20/backtoqin2.html"><![CDATA[<p><b>Chapter 1: The Adventure Begins</b></p>

<p>Our story begins in the city of Xi’an, where a bus was speeding down a long highway. Most of the passengers were headed to the same destination: the Terracotta Army Museum.</p>

<p>In the middle of the bus sat a boy named Joe and his father, Zack.</p>

<p>“I wonder what Qin Shi Huangdi’s creation will look like, and how large Pit One is,” Joe asked his father with curiosity.</p>

<p>“You’ll find out soon enough. We’re about to see some glorious artifacts and the remarkable clay figures built thousands of years ago,” Zack replied.</p>

<p>Eventually, the loudspeaker boomed, “Approaching final destination.” Joe and Zack jumped off the bus and rushed to the entrance. Joe stared at the long line of visitors while waiting for his father to print their tickets.</p>

<p>As he waited, Joe’s mind wandered to the Terracotta Army. Despite having watched many videos about them at home, he couldn’t help but imagine what they might look like in person. The more he thought about it, the hungrier he felt.</p>

<p>Glancing at his watch, he realized 20 minutes had already passed.</p>

<p>Just then, he saw his father coming towards him with two sandwiches and the tickets in hand. They decided to finish lunch before entering the museum.</p>

<p>Little did you know that the young boy sitting outside the museum entrance eating a sandwich was about to experience an extraordinary adventure that would change his life forever.</p>

<p><b>Chapter 2: A Touch of History</b></p>

<p>After finishing their lunch, Joe and Zack finally entered the museum. The halls were filled with awe-inspiring artifacts and displays that captured the grandeur of ancient China. Joe was especially drawn to the life-sized Terracotta Warriors standing in perfect formation.</p>

<p>As they walked through the museum, Joe’s excitement grew. He couldn’t wait to see Pit One, where thousands of these warriors were arranged in battle formation. When they finally reached the pit, Joe’s eyes widened in amazement. The sight was even more incredible than he had imagined.</p>

<p>“Stay close,” Zack reminded him, but Joe’s curiosity got the better of him. He edged closer to the barrier, wanting a better look at one of the warriors. Without thinking, he reached out and touched the cold, clay surface of the figure.</p>

<p>Suddenly, the ground beneath Joe’s feet began to tremble. A strange, swirling mist enveloped him, and before he knew it, everything went black.</p>

<p>When he opened his eyes, Joe found himself standing in the middle of a bustling ancient city. The sounds of merchants calling out their wares and the sight of people dressed in traditional robes filled his senses.</p>

<p>“Where am I?” Joe wondered aloud.</p>

<p>“You are in Xianyang, the capital of the Qin Empire,” a voice answered. Joe turned to see an elderly man with a long beard and wise eyes. “I am Li Si, the Prime Minister of Qin. You must have come from a faraway land.”</p>

<p>Joe was too stunned to speak. He realized he had somehow traveled back in time, over 2000 years ago, to the era of Qin Shi Huangdi.</p>

<p><b>Chapter 3: The Qin Journey</b></p>

<p>Li Si took Joe to the grand palace, where he was presented to Emperor Qin Shi Huangdi himself. The emperor was a formidable figure, with a commanding presence and eyes that seemed to see right through Joe.</p>

<p>“Who are you, and how did you come to be in my kingdom?” the emperor demanded.</p>

<p>Joe explained his strange journey, and to his surprise, the emperor listened intently. Intrigued by Joe’s knowledge of the future and the modern world, Qin Shi Huangdi decided to keep him close.</p>

<p>“You will serve as my advisor and share with me the knowledge of your time,” the emperor declared.</p>

<p>Joe quickly adapted to life in ancient China. He learned about the daily life of the people, the emperor’s vesion to unify China, the construction of the Great Wall, and the emperor’s quest for immortality.</p>

<p>As Joe became a trusted advisor to the emperor, he helped establish rules and policies to improve the lives of the people, shared his knowledge of modern technology, and even played a role in the construction of the Great Wall.</p>

<p>Grateful for Joe’s contribution, Qin Shi Huangdi rewarded him with a magnificent jade pendant.</p>

<p><b>Chapter 4: The Tyrant</b></p>

<p>However, the more states the emperor conquered, the more Joe started to feel something different.</p>

<p>The emperor became more ruthless and obsessed with power. He started to impose harsher laws and punishments, executed those who disagreed with him, and burned books that recorded his crucial activities.</p>

<p>Joe noticed the fear in the eyes of the people and the growing unrest in the empire. He felt a heavy weight in his chest and couldn’t ignore the changes he was seeing. Determined to help, Joe decided to speak with Qin Shi Huangdi.</p>

<p>“Your Majesty, I must speak with you,” Joe said, entering the emperor’s chamber.</p>

<p>“What is it, Joe?” the emperor asked, sensing the urgency in Joe’s voice.</p>

<p>“Your actions are causing great suffering among the people. The harsh laws and punishments, the endless conquests – it’s too much. You are becoming a tyrant,” Joe said boldly.</p>

<p>The emperor’s eyes flashed with anger. “How dare you speak to me this way! I am the Son of Heaven, and my rule is absolute.”</p>

<p>For a moment, Joe felt a deep chill down his spine, realizing it was impossible to change the emperor. He knew he had to leave before things got worse.</p>

<p><b>Chapter 5: The Journey Home</b></p>

<p>One day, while standing in the emperor’s garden, Joe felt a familiar tremor beneath his feet. he realized it is time to return home.</p>

<p>With a final farewell, Joe offered some advice to the emperor one last time and then was transported back to the present day.</p>

<p>When he found himself standing in the museum, his hand still touching the clay figure. Everything looked the same, but Joe knew he had experienced something extraordinary.</p>

<p>“Joe, where have you been?” Zack’s voice broke through his thoughts. “I’ve been looking for you.”</p>

<p>Joe smiled and gently put the jade pendant into his pocket, he looked at the Terracotta Warrior then replied to his father, “Just on an adventure, Dad. Just on an adventure.”</p>

<p><img src="/assets/backtoqin2.png" alt="image tooltip here" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[Chapter 1: The Adventure Begins]]></summary></entry><entry><title type="html">Handling a RDS MySQL cluster CPU 100%</title><link href="http://localhost:4000/jekyll/cat2/2024/06/17/mysql-cup100.html" rel="alternate" type="text/html" title="Handling a RDS MySQL cluster CPU 100%" /><published>2024-06-17T10:15:29+10:00</published><updated>2024-06-17T10:15:29+10:00</updated><id>http://localhost:4000/jekyll/cat2/2024/06/17/mysql-cup100</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2024/06/17/mysql-cup100.html"><![CDATA[<p><b>The Incident</b></p>

<p>Today I got a performance issue from our analytic team, saying they experienced a Production MySQL cluster running on RDS very slow since yesterday morning.  </p>

<p>I started to look into bellow areas for investigation:</p>

<ul>
  <li>AWS CloudWatch Metrics for RDS</li>
</ul>

<p>AWS CloudWatch provides a wide range of metrics that can help diagnose resource usage for databases. So I started with</p>

<p><em>CloudWatch - Metrics - All metrics - Add query - RDS - Top 10 RDS instances by highest CPU utilization</em></p>

<p>This only queries the recent 3 hours metrics, but it is enough for me to identify the issue: CPU 100%</p>

<p><img src="/assets/mysqlcpu1.png" alt="image tooltip here" /></p>

<p>To further understand the high CUP, I go:</p>

<p><em>CloudWatch - Metrics - All metrics - Browse - RDS - DBClusterIdentifier - CPUUtilization</em></p>

<p>which gives me a long period of monitoring, so I can see it started to 100% CPU since yesterday morning.</p>

<p><img src="/assets/mysqlcpu2.png" alt="image tooltip here" /></p>

<ul>
  <li>AWS console RDS Logs &amp; events</li>
</ul>

<p>Now let’s find out from the RDS logs to see if any errors can indicate who could be the person. So I go</p>

<p><em>RDS - “the DB cluster” - “the DB instance” - “Logs &amp; events” - “error/mysql-error-running.log.2024-06-18.02”</em></p>

<p>I got :</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">2024-06-18T00:04:58.750212Z 2831474 <span class="o">[</span>Note] Aborted connection 2831474 to db: <span class="s1">'xxxxxx'</span> user: <span class="s1">'xxxx'</span> host: <span class="s1">'10.xx.xx.xx'</span> <span class="o">(</span>Unknown error<span class="o">)</span>
2024-06-18T00:12:00.798173Z 2831498 <span class="o">[</span>Note] Aborted connection 2831498 to db: <span class="s1">'xxxx'</span> user: <span class="s1">'xxxx'</span> host: <span class="s1">'10.xx.xx.xx'</span> <span class="o">(</span>Got an error writing communication packets<span class="o">)</span>
<span class="nt">-----------------------</span> END OF LOG <span class="nt">----------------------</span></code></pre></figure>

<p>Up to here I generally have an idea of what is going on and can locate the person “xxxx” who was running something at the time CPU 100%.</p>

<ul>
  <li>MySQL Client Tool to list, identiry and terminate long-running queries</li>
</ul>

<p>It is time to log in to the RDS endpoint to see what is happening and which queries might cause the CPU usage. Here we need login via MySQL “root” to be able to see all other users’ running processes. Then pay attention to the high “Time” and “State” values indicating all the stuck processes, then we kill them and restart the RDS instance</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">mysql <span class="nt">-u</span> root <span class="nt">-p</span> <span class="nt">-h</span> rds_endpoint
SHOW PROCESSLIST<span class="p">;</span>
KILL &lt;process_id&gt;<span class="p">;</span></code></pre></figure>

<p><img src="/assets/mysqlcpu4.png" alt="image tooltip here" /></p>

<p>Then I go <em>AWS RDS console - Actions - Reboot</em> the RDS instance.</p>

<ul>
  <li>Now the CPU usage started to drop and back to normal after terminating the stuck processes and DB instance reboot.</li>
</ul>

<p><img src="/assets/mysqlcpu3.png" alt="image tooltip here" /></p>

<p>Done.</p>

<p><b> Conclusion</b></p>

<p>Even the issue had been fixed, I was still thinking how to better monitor RDS resource usage. I think we need:</p>

<ul>
  <li>
    <p>A “CloudWatch Alarm” to set “CPUUtilization” metric threshold to 80%, then specify the period (e.g., 5 minutes) and the number of periods (e.g., 2 out of 3) that the metric must breach the threshold to trigger the alarm.</p>
  </li>
  <li>
    <p>Create “SNS topic” with team Email for the alarm to send a notification</p>
  </li>
  <li>
    <p>Enable “RDS Performance Insights”, this can monitor the load on the database, identify the source of bottlenecks, and understand how the DB is performing, especially during troubleshooting.</p>
  </li>
  <li>
    <p>Enable “Enhanced Monitoring” and select the monitoring interval (e.g., 1 minute), which provides real-time metrics for the operating system that the DB instance runs on, this helps for immediate investigation on OS level</p>
  </li>
  <li>
    <p>Enable “Slow Query Log” for regularly analysing slow query logs and performance insights to optimize RDS database queries, identify queries that take a long time to execute, use tools like EXPLAIN to understand query performance, add appropriate indexes, and then ultimately rewrite queries for better performance.</p>
  </li>
</ul>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[The Incident]]></summary></entry><entry><title type="html">Istio: Distributed Tracing with Jaeger</title><link href="http://localhost:4000/jekyll/cat2/2024/05/24/istio2.html" rel="alternate" type="text/html" title="Istio: Distributed Tracing with Jaeger" /><published>2024-05-24T10:15:29+10:00</published><updated>2024-05-24T10:15:29+10:00</updated><id>http://localhost:4000/jekyll/cat2/2024/05/24/istio2</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2024/05/24/istio2.html"><![CDATA[<p><b>About Jaeger</b></p>

<p>Last post we are able to depoly <a href="https://zackz.online/jekyll/cat2/2024/05/22/istio.html">Istio</a> and manage traffic for a book review microservice application. This session we will dive deeper into Istia for it add-on Jaeger for Microservice tracing.</p>

<p>Jaeger is an open-source end-to-end distributed tracing tool to monitor and troubleshoot the performance of microservices-based distributed systems by providing insights into the latency and other performance metrics.</p>

<ul>
  <li>Trace</li>
</ul>

<p>A trace represents the entire journey of a request or transaction as it propagates through various services and components of a distributed system. It captures the path the request takes, including all the microservices it interacts with, from start to finish. A trace is composed of multiple spans.</p>

<ul>
  <li>Span</li>
</ul>

<p>A span is a single unit of work within a trace. It represents an individual operation within a microservice, such as a function call, database query, or external API request. Each span contains metadata such as:</p>

<p><b>Prepration for Hands on</b></p>

<p>Here we will use <a href="https://github.com/DickChesterwood/k8s-fleetman">Fleetman GPS sumilater microservice application</a> as example to explore Jaeger and it capabilities.</p>

<ul>
  <li>Enable Istio sidecar injection for existing deployment</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># lable the namaspace to allow istio sidecar container injection</span>
<span class="o">[</span>root@freeipa-server ~]# kubectl label namespace default istio-injection<span class="o">=</span>enabled <span class="nt">--overwrite</span>

<span class="c"># Redeploy fleetman application</span>
<span class="o">[</span>root@freeipa-server ~]# kubectl rollout restart deployment <span class="nt">-n</span> default</code></pre></figure>

<ul>
  <li>validate pod for istio sidecar injection, also check service status in Kiali</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="o">[</span>root@freeipa-server ~]# kubectl get po
NAME                                                        READY   STATUS    RESTARTS       AGE
api-gateway-58f978dfc6-phdgp                                2/2     Running   4 <span class="o">(</span>30m ago<span class="o">)</span>    17h
position-simulator-6f5df9b447-57d75                         2/2     Running   4 <span class="o">(</span>30m ago<span class="o">)</span>    17h
position-tracker-6698577777-fz52v                           2/2     Running   4 <span class="o">(</span>30m ago<span class="o">)</span>    17h
staff-service-59987757dc-mfm2t                              2/2     Running   4 <span class="o">(</span>30m ago<span class="o">)</span>    17h
vehicle-telemetry-56c7f8d859-jvtpj                          2/2     Running   4 <span class="o">(</span>30m ago<span class="o">)</span>    17h
webapp-59bc7757fb-trnnv                                     2/2     Running   6 <span class="o">(</span>30m ago<span class="o">)</span>    17h</code></pre></figure>

<p><img src="/assets/istio2-2.png" alt="image tooltip here" /></p>

<p><b>How Jaeger Works</b></p>

<p>When a request enters a microservice (e.g., a user making a request to a frontend service), the tracing library creates a span and assigns it a trace ID. As the request propagates through other services, additional spans are created and linked to the same trace ID. Each span is recorded with its respective start and end timestamps, operation name, and other metadata.</p>

<p>The Jaeger UI provides a way to visualize traces. Users can search for traces based on various criteria (e.g., service name, operation name, duration) and view the detailed structure of individual traces, like durations of time spent between microservices.</p>

<p>As the request flows through different services, each service creates additional or child spans. (e.g., The frontend service might call an authentication service. then authentication service call a user service, thus Jaeger will create 2 child spans)</p>

<p><img src="/assets/istio2-1.png" alt="image tooltip here" /></p>

<p><b>Latency and Performance Analysis</b></p>

<p>By examining the durations of each span, If a particular span has a long duration, that service might be a bottleneck.
If spans have significant gaps between them, network latency or queuing delays might be an issue. so we can identify which part of the request is taking the most time and investigate further to optimize performance.</p>

<p><img src="/assets/istio2-4.png" alt="image tooltip here" /></p>

<p><b>Manage routing in each service from Kiali </b></p>

<p>Managing routing in Istio can be done either through the Kiali console or by defining VirtualServices and DestinationRules using Kubernetes YAML manifests. here from Kiali console, we have the visualization of each service traffic flow, metrics, and dependencies between services in real-time.</p>

<p>By create weighted routing or suspend traffic, Kiali will create it own VirtualServices and DestinationRules to manage the traffic</p>

<p><img src="/assets/istio2-3.png" alt="image tooltip here" /></p>

<p><b>Add timeout in istio virtual service YAML</b></p>

<p>To add a timeout into istio virtual service YAML and ensure it works with Jaeger for better visibility and efficiency in the microservice architecture.</p>

<p>By adding this timeout to 3s for bellow “api-gateway” virtual service, Jaeger trace will aviod long response time when a request call api-gateway, any response longer than 3s will reture http timeout, which add visibility to Jaeger UI to determine if the request successful or not.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: api-gateway
spec:
  hosts:
  - api-gateway
  http:
  - route:
    - destination:
        host: api-gateway
        port:
          number: 80
    <span class="nb">timeout</span>: 3s <span class="c"># 3 seconds timeout add</span></code></pre></figure>

<p><b> Conclusion</b></p>

<p>In this session we deep dive into Istio add-on Jaeger for distributed tracing, which Jaeger facilitates, involves tracking requests as they flow through various services and components of an application. This helps identify bottlenecks, understand service dependencies, and improve overall performance.</p>

<p>In the next post I will see how to use Istio and Kiali to run some Canary Releases, Blue-Green deployment Rolling Updates and A/B Testing.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[About Jaeger]]></summary></entry><entry><title type="html">Istio: Traffic Routing</title><link href="http://localhost:4000/jekyll/cat2/2024/05/22/istio.html" rel="alternate" type="text/html" title="Istio: Traffic Routing" /><published>2024-05-22T10:15:29+10:00</published><updated>2024-05-22T10:15:29+10:00</updated><id>http://localhost:4000/jekyll/cat2/2024/05/22/istio</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2024/05/22/istio.html"><![CDATA[<p><b>Helm install istio </b></p>

<p>Here we use helm to install istio (istio-base, istiod, istia gateway), then deploy a sample online book store microservice “bookinfo”, practise istio tasks include Traffic Management, Observability, Security.</p>

<p>Bookinfo Topology:</p>

<p><img src="/assets/bookinfo.png" alt="image tooltip here" /></p>

<ul>
  <li>Helm install istio (istiod, istio-ingress)</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl create namespace istio-system
helm pull istio/base
helm <span class="nb">install </span>istio-base <span class="nb">.</span> <span class="nt">-n</span> istio-system <span class="nt">--set</span> <span class="nv">defaultRevision</span><span class="o">=</span>default

helm pull istio/istiod
helm <span class="nb">install </span>istiod <span class="nb">.</span> <span class="nt">-n</span> istio-system 

kubectl create namespace istio-ingress
helm pull istio/gateway
helm <span class="nb">install </span>istio-ingress <span class="nb">.</span> <span class="nt">-n</span> istio-ingress

helm <span class="nb">ls</span> <span class="nt">-n</span> istio-system
NAME      	NAMESPACE   	REVISION	UPDATED                                	STATUS  	CHART        	APP VERSION
istio-base	istio-system	1       	2023-12-17 08:14:06.943276388 +0800 CST	deployed	base-1.20.1  	1.20.1     
istiod    	istio-system	1       	2023-12-17 08:15:40.370551503 +0800 CST	deployed	istiod-1.20.1	1.20.1 

helm <span class="nb">ls</span> <span class="nt">-n</span> istio-ingress
NAME         	NAMESPACE    	REVISION	UPDATED                                	STATUS  	CHART         	APP VERSION
istio-ingress	istio-ingress	1       	2023-12-17 08:25:07.111999373 +0800 CST	deployed	gateway-1.20.1	1.20.1</code></pre></figure>

<ul>
  <li>Deploy bookinfo microservice and istio ingressgateway and virtualservice</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">kubectl label namespace istio-system istio-injection<span class="o">=</span>enabled

kubectl apply <span class="nt">-f</span> https://github.com/istio/istio/blob/master/samples/bookinfo/platform/kube/bookinfo.yaml <span class="nt">-oyaml</span> <span class="o">&gt;</span> bookinfo.yaml
kubectl apply <span class="nt">-f</span> bookinfo.yaml

kubectl get po
NAME                                                     READY   STATUS    RESTARTS       AGE
details-v1-698d88b-wmfcb                                 2/2     Running   0              21m
ratings-v1-6484c4d9bb-cb6gx                              2/2     Running   0              21m
reviews-v1-5b5d6494f4-jrsvc                              2/2     Running   0              21m
reviews-v2-5b667bcbf8-jgfzj                              2/2     Running   0              21m
reviews-v3-5b9bd44f4-tmmfz                               2/2     Running   0              21m

kubectl apply <span class="nt">-f</span> https://github.com/istio/istio/blob/master/samples/bookinfo/networking/bookinfo-gateway.yaml <span class="nt">-oyaml</span> <span class="o">&gt;</span> bookinfo-gateway.yaml
kubectl apply <span class="nt">-f</span> bookinfo-gateway.yaml</code></pre></figure>

<ul>
  <li>Deploy Kiali, jaeger, grafana, prometheus</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">wget https://raw.githubusercontent.com/istio/istio/release-1.20/samples/addons/prometheus.yaml
wget https://raw.githubusercontent.com/istio/istio/release-1.20/samples/addons/jaeger.yaml
wget https://raw.githubusercontent.com/istio/istio/release-1.20/samples/addons/grafana.yaml
kubectl create <span class="nt">-f</span> prometheus.yaml <span class="nt">-f</span> jaeger.yaml <span class="nt">-f</span> grafana.yaml</code></pre></figure>

<ul>
  <li>
    <p>visit http://book.istio:31000/productpage, with review (v1, v2, v3)
<img src="/assets/kiali.png" alt="image tooltip here" /></p>
  </li>
  <li>
    <p>define destination rules and virtual service for reviews</p>
  </li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">wget https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/networking/destination-rule-all.yaml
wget https://raw.githubusercontent.com/istio/istio/master/samples/bookinfo/networking/virtual-service-reviews-90-10.yaml

kubectl create <span class="nt">-f</span> destination-rule-all.yaml <span class="nt">-f</span> virtual-service-reviews-90-10.yaml   <span class="c"># route v1 10% and v3 90%</span>
kubectl scale deployment reviews-v2 <span class="nt">-n</span> istio-system <span class="nt">--replicas</span><span class="o">=</span>0 <span class="c"># scale down v2 to 0</span>

kubectl get dr <span class="nt">-A</span>
NAMESPACE      NAME          HOST          AGE
istio-system   details       details       6m56s
istio-system   productpage   productpage   6m56s
istio-system   ratings       ratings       6m56s
istio-system   reviews       reviews       6m56s
kubectl get vs <span class="nt">-A</span>
NAMESPACE      NAME       GATEWAYS               HOSTS            AGE
istio-system   bookinfo   <span class="o">[</span><span class="s2">"bookinfo-gateway"</span><span class="o">]</span>   <span class="o">[</span><span class="s2">"book.istio"</span><span class="o">]</span>   19h
istio-system   reviews                           <span class="o">[</span><span class="s2">"reviews"</span><span class="o">]</span>      5m26s

Spec:
  Hosts:
    reviews
  Http:
    Route:
      Destination:
        Host:    reviews
        Subset:  v1
      Weight:    10
      Destination:
        Host:    reviews
        Subset:  v3
      Weight:    90</code></pre></figure>

<p>refresh bookinfo webpage, test Traffic route weight as bellow</p>

<p>90% traffic for reviews v3  vs  10% traffic for review v1</p>

<p><img src="/assets/1090.png" alt="image tooltip here" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[Helm install istio]]></summary></entry><entry><title type="html">Terraform Module for AWS SSO User Assignment</title><link href="http://localhost:4000/jekyll/cat2/2024/05/20/terraform1.html" rel="alternate" type="text/html" title="Terraform Module for AWS SSO User Assignment" /><published>2024-05-20T10:15:29+10:00</published><updated>2024-05-20T10:15:29+10:00</updated><id>http://localhost:4000/jekyll/cat2/2024/05/20/terraform1</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2024/05/20/terraform1.html"><![CDATA[<p><b> Challange About AWS SSO User Assignment</b></p>

<p>In the company, we use AWS SSO for user authentication; when a new user is created from Azure AD, it will automatically synced by AWS IAM Identity Center and Azure AD integration, and then our team will need to handle the SSO user assignment to put them in the required AWS accounts with requested permission sets, it became a pain when such requests coming more frequently and every time an individual user or a whole team with different accounts and permission requirements need to be fulfilled, so how to handle this efficiently become my recent topic.</p>

<p>So far, I have tried shell script and Python script to read the user name, AWS account ID, and permission sets ARN from a CSV file, then complete the task with AWScli. However it is not smart enough when the request or scenario changes. I have to adjust the script everytime.</p>

<p><b> Managing individual request via Terraform </b></p>

<p>Let’s start with handling user assignment individually with terraform first. here I have 2 requests:</p>

<ol>
  <li>
    <p>A user “user1@company.com”, under a group called “AD-RDS-READ-ONLY” in AWS IAM Identity Center, I need to create a permission set in aws account “123456789”, and assign to this user.</p>
  </li>
  <li>
    <p>The second request is from security team, we have 3 security team members (security1@company.com, security2@company.com, security3@company.com), under a group called “AD-ACM-FULL-ACCESS” in AWS IAM Identity Center, they all need full access for AWS certificate manager access, for all of our 3 AWS accounts (12345678901, 12345678902, and 12345678903).</p>
  </li>
</ol>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">vim main.tf

<span class="c"># For Request 1 for RDS read only access for 1 user in 1 AWS account </span>

<span class="c"># for AWS in ap-southeast-2</span>
provider <span class="s2">"aws"</span> <span class="o">{</span>
 region <span class="o">=</span> <span class="s2">"ap-southeast-2"</span>
<span class="o">}</span>

<span class="c"># Define the AWS SSO Instance ARN</span>
data <span class="s2">"aws_ssoadmin_instances"</span> <span class="s2">"main"</span> <span class="o">{}</span>

resource <span class="s2">"aws_ssoadmin_permission_set"</span> <span class="s2">"request1"</span> <span class="o">{</span>
 instance_arn <span class="o">=</span> data.aws_ssoadmin_instances.main.arns[0]
 name         <span class="o">=</span> <span class="s2">"RDS-ReadOnly"</span>
 description  <span class="o">=</span> <span class="s2">"Read-only access to RDS resources"</span>
 session_duration <span class="o">=</span> <span class="s2">"PT1H"</span>

 <span class="c"># Add the policies you need for this permission set</span>
 managed_policies <span class="o">=</span> <span class="o">[</span>
 <span class="s2">"arn:aws:iam::aws:policy/AmazonRDSReadOnlyAccess"</span>,
 <span class="o">]</span>
<span class="o">}</span>

resource <span class="s2">"aws_ssoadmin_account_assignment"</span> <span class="s2">"request1"</span> <span class="o">{</span>
 instance_arn       <span class="o">=</span> data.aws_ssoadmin_instances.main.arns[0]
 permission_set_arn <span class="o">=</span> aws_ssoadmin_permission_set.request1.arn
 principal_id       <span class="o">=</span> <span class="s2">"user1@company.com"</span>
 principal_type     <span class="o">=</span> <span class="s2">"USER"</span>
 target_id          <span class="o">=</span> <span class="s2">"123456789"</span>  # Replace with your AWS Account ID
 target_type        <span class="o">=</span> <span class="s2">"AWS_ACCOUNT"</span>
<span class="o">}</span>

<span class="c"># Ensure the user is part of the required group</span>
data <span class="s2">"aws_identitystore_group"</span> <span class="s2">"request1"</span> <span class="o">{</span>
 identity_store_id <span class="o">=</span> data.aws_ssoadmin_instances.main.identity_store_id
 display_name      <span class="o">=</span> <span class="s2">"AD-RDS-READ-ONLY"</span>
<span class="o">}</span>

resource <span class="s2">"aws_ssoadmin_group_membership"</span> <span class="s2">"request1"</span> <span class="o">{</span>
 identity_store_id <span class="o">=</span> data.aws_ssoadmin_instances.main.identity_store_id
 group_id          <span class="o">=</span> data.aws_identitystore_group.request1.group_id
 user_ids          <span class="o">=</span> <span class="o">[</span><span class="s2">"user1@company.com"</span><span class="o">]</span>
<span class="o">}</span>

<span class="c"># handle request 2 for ACM full access for whole security team in all 3 AWS accounts </span>

vim main.tf

<span class="c"># use existing main.tf file  </span>
<span class="c"># provider "aws" {</span>
<span class="c">#  region = "ap-southeast-2"</span>
<span class="c"># }</span>
<span class="c"># data "aws_ssoadmin_instances" "main" {}</span>

<span class="c"># Create the Permission Set for ACM Full Access</span>
resource <span class="s2">"aws_ssoadmin_permission_set"</span> <span class="s2">"acm_full_access"</span> <span class="o">{</span>
 instance_arn <span class="o">=</span> data.aws_ssoadmin_instances.main.arns[0]
 name         <span class="o">=</span> <span class="s2">"ACM-FullAccess"</span>
 description  <span class="o">=</span> <span class="s2">"Full access to AWS Certificate Manager"</span>
 session_duration <span class="o">=</span> <span class="s2">"PT1H"</span>

 managed_policies <span class="o">=</span> <span class="o">[</span>
 <span class="s2">"arn:aws:iam::aws:policy/AWSCertificateManagerFullAccess"</span>,
 <span class="o">]</span>
<span class="o">}</span>

<span class="c"># List of AWS account IDs</span>
<span class="c"># here we use terrafom "locals", "dynamic" and "for_each" to loop SSO user assignment for security team within all AWS accounts </span>
locals <span class="o">{</span>
 aws_account_ids <span class="o">=</span> <span class="o">[</span><span class="s2">"12345678901"</span>, <span class="s2">"12345678902"</span>, <span class="s2">"12345678903"</span><span class="o">]</span>
<span class="o">}</span>

<span class="c"># Security team members</span>
locals <span class="o">{</span>
 security_team_members <span class="o">=</span> <span class="o">[</span><span class="s2">"security1@company.com"</span>, <span class="s2">"security2@company.com"</span>, <span class="s2">"security3@company.com"</span><span class="o">]</span>
<span class="o">}</span>

<span class="c"># Ensure the users are part of the required group</span>
data <span class="s2">"aws_identitystore_group"</span> <span class="s2">"acm_full_access_group"</span> <span class="o">{</span>
 identity_store_id <span class="o">=</span> data.aws_ssoadmin_instances.main.identity_store_id
 display_name      <span class="o">=</span> <span class="s2">"AD-ACM-FULL-ACCESS"</span>
<span class="o">}</span>

resource <span class="s2">"aws_ssoadmin_group_membership"</span> <span class="s2">"acm_full_access_membership"</span> <span class="o">{</span>
 identity_store_id <span class="o">=</span> data.aws_ssoadmin_instances.main.identity_store_id
 group_id          <span class="o">=</span> data.aws_identitystore_group.acm_full_access_group.group_id
 user_ids          <span class="o">=</span> local.security_team_members
<span class="o">}</span>

<span class="c"># Assign the Permission Set to Each User for Each Account</span>
resource <span class="s2">"aws_ssoadmin_account_assignment"</span> <span class="s2">"acm_full_access_assignments"</span> <span class="o">{</span>
 for_each <span class="o">=</span> <span class="o">{</span> <span class="k">for </span>acc_id <span class="k">in </span>local.aws_account_ids : acc_id <span class="o">=&gt;</span> acc_id <span class="o">}</span>

 instance_arn       <span class="o">=</span> data.aws_ssoadmin_instances.main.arns[0]
 permission_set_arn <span class="o">=</span> aws_ssoadmin_permission_set.acm_full_access.arn
 principal_type     <span class="o">=</span> <span class="s2">"USER"</span>
 target_type        <span class="o">=</span> <span class="s2">"AWS_ACCOUNT"</span>

 dynamic <span class="s2">"assignment"</span> <span class="o">{</span>
 for_each <span class="o">=</span> local.security_team_members
 content <span class="o">{</span>
 principal_id <span class="o">=</span> assignment.value
 target_id    <span class="o">=</span> each.key
 <span class="o">}</span>
 <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p><b> Terraform Modularity </b></p>

<p>How about the Terraform module, as I will get different user assignment requests with different permission sets and AWS accounts? I guess a Terraform module for SSO user assignment is the best way to make the Terraform code more clean and reuseable. There are many benefits to infrastructure as code with modularity. It can reduce code duplication, is easy to update, and has a clear code structure, which fits my AWS SSO user assignment task and challenge perfectly.</p>

<p>To achieve this, I will need to create a folder called “sso_user_assignment_module”, inside the folder it will contain:</p>

<ul>
  <li>A “main.tf” file to define the resources for creating permission sets and assigning them to users.</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># modules/sso_account_assignment/main.tf</span>

provider <span class="s2">"aws"</span> <span class="o">{</span>
 region <span class="o">=</span> var.aws_region
<span class="o">}</span>

data <span class="s2">"aws_ssoadmin_instances"</span> <span class="s2">"main"</span> <span class="o">{}</span>

resource <span class="s2">"aws_ssoadmin_permission_set"</span> <span class="s2">"this"</span> <span class="o">{</span>
 for_each <span class="o">=</span> var.permission_sets

 instance_arn <span class="o">=</span> data.aws_ssoadmin_instances.main.arns[0]
 name         <span class="o">=</span> each.key
 description  <span class="o">=</span> each.value.description
 session_duration <span class="o">=</span> each.value.session_duration

 managed_policies <span class="o">=</span> each.value.managed_policies
<span class="o">}</span>

resource <span class="s2">"aws_ssoadmin_account_assignment"</span> <span class="s2">"this"</span> <span class="o">{</span>
 for_each <span class="o">=</span> <span class="o">{</span> <span class="k">for </span>ps_key, ps_value <span class="k">in </span>var.permission_sets : ps_key <span class="o">=&gt;</span> ps_value.accounts <span class="o">}</span>

 instance_arn       <span class="o">=</span> data.aws_ssoadmin_instances.main.arns[0]
 permission_set_arn <span class="o">=</span> aws_ssoadmin_permission_set.this[each.key].arn
 principal_type     <span class="o">=</span> <span class="s2">"USER"</span>
 target_type        <span class="o">=</span> <span class="s2">"AWS_ACCOUNT"</span>

 dynamic <span class="s2">"assignment"</span> <span class="o">{</span>
 for_each <span class="o">=</span> each.value.users
 content <span class="o">{</span>
 principal_id <span class="o">=</span> assignment.value
 target_id    <span class="o">=</span> each.value.account_id
 <span class="o">}</span>
 <span class="o">}</span>
<span class="o">}</span>

data <span class="s2">"aws_identitystore_group"</span> <span class="s2">"this"</span> <span class="o">{</span>
 for_each <span class="o">=</span> var.groups

 identity_store_id <span class="o">=</span> data.aws_ssoadmin_instances.main.identity_store_id
 display_name      <span class="o">=</span> each.key
<span class="o">}</span>

resource <span class="s2">"aws_ssoadmin_group_membership"</span> <span class="s2">"this"</span> <span class="o">{</span>
 for_each <span class="o">=</span> var.groups

 identity_store_id <span class="o">=</span> data.aws_ssoadmin_instances.main.identity_store_id
 group_id          <span class="o">=</span> data.aws_identitystore_group.this[each.key].group_id
 user_ids          <span class="o">=</span> each.value
<span class="o">}</span></code></pre></figure>

<ul>
  <li>A “variables.tf” to define the input variables for the module</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># variables.tf</span>
vim variables.tf

provider <span class="s2">"aws"</span> <span class="o">{</span>
 region <span class="o">=</span> var.region
<span class="o">}</span>

variable <span class="s2">"sso_instance_arn"</span> <span class="o">{</span>
 description <span class="o">=</span> <span class="s2">"The ARN of the AWS SSO instance"</span>
 <span class="nb">type</span>    <span class="o">=</span> string
<span class="o">}</span>

variable <span class="s2">"assignments"</span> <span class="o">{</span>
 description <span class="o">=</span> <span class="s2">"Map of account IDs to users and their permission sets"</span>
 <span class="nb">type</span>    <span class="o">=</span> map<span class="o">(</span>list<span class="o">(</span>object<span class="o">({</span>
 principal_id   <span class="o">=</span> string
 permission_set_arn <span class="o">=</span> string
 <span class="o">})))</span>
<span class="o">}</span>

variable <span class="s2">"region"</span> <span class="o">{</span>
 description <span class="o">=</span> <span class="s2">"AWS region"</span>
 <span class="nb">type</span>    <span class="o">=</span> string
 default  <span class="o">=</span> <span class="s2">"ap-southeast-2"</span>
<span class="o">}</span>

module <span class="s2">"sso_account_assignments"</span> <span class="o">{</span>
 <span class="nb">source</span> <span class="o">=</span> <span class="s2">"./modules/sso_account_assignment"</span>

 for_each    <span class="o">=</span> var.assignments
 sso_instance_arn <span class="o">=</span> var.sso_instance_arn
 account_id   <span class="o">=</span> each.key
 <span class="nb">users</span>     <span class="o">=</span> each.value
<span class="o">}</span></code></pre></figure>

<ul>
  <li>A “outputs.tf” file to define the outputs of the module.</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">vim outputs.tf
<span class="c"># define outputs of permission_set_arns and group_ids</span>
output <span class="s2">"permission_set_arns"</span> <span class="o">{</span>
 value <span class="o">=</span> <span class="o">{</span> <span class="k">for </span>k, v <span class="k">in </span>aws_ssoadmin_permission_set.this : k <span class="o">=&gt;</span> v.arn <span class="o">}</span>
<span class="o">}</span>

output <span class="s2">"group_ids"</span> <span class="o">{</span>
 value <span class="o">=</span> <span class="o">{</span> <span class="k">for </span>k, v <span class="k">in </span>data.aws_identitystore_group.this : k <span class="o">=&gt;</span> v.group_id <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<ul>
  <li>now we need to Create a Terraform configuration that uses this module and set the environment variables accordingly. go back to the root folder, create a root “main.tf” file to call the module and pass the necessary variables.</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nb">cd</span> ..
vim main.tf
<span class="c"># the root main.tf file</span>
module <span class="s2">"sso_permission_sets"</span> <span class="o">{</span>
 <span class="nb">source</span> <span class="o">=</span> <span class="s2">"./modules/aws_sso_permission_sets"</span>

 aws_region       <span class="o">=</span> var.aws_region
 permission_sets  <span class="o">=</span> var.permission_sets
 <span class="nb">groups</span>           <span class="o">=</span> var.groups
<span class="o">}</span>

<span class="c"># Optionally output the values</span>
output <span class="s2">"permission_set_arns"</span> <span class="o">{</span>
 value <span class="o">=</span> module.sso_permission_sets.permission_set_arns
<span class="o">}</span>

output <span class="s2">"group_ids"</span> <span class="o">{</span>
 value <span class="o">=</span> module.sso_permission_sets.group_ids
<span class="o">}</span></code></pre></figure>

<ul>
  <li>root “variables.tf” file to define the input variables for the root configuration.</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># the root variables.tf</span>
vim variables.tf

variable <span class="s2">"aws_region"</span> <span class="o">{</span>
 description <span class="o">=</span> <span class="s2">"The AWS region to use."</span>
 <span class="nb">type</span>        <span class="o">=</span> string
 default     <span class="o">=</span> <span class="s2">"ap-southeast-2"</span>
<span class="o">}</span>

variable <span class="s2">"permission_sets"</span> <span class="o">{</span>
 description <span class="o">=</span> <span class="s2">"A map of permission sets with their configurations."</span>
 <span class="nb">type</span> <span class="o">=</span> map<span class="o">(</span>object<span class="o">({</span>
 description     <span class="o">=</span> string
 session_duration <span class="o">=</span> string
 managed_policies <span class="o">=</span> list<span class="o">(</span>string<span class="o">)</span>
 accounts        <span class="o">=</span> map<span class="o">(</span>object<span class="o">({</span>
 account_id <span class="o">=</span> string
 <span class="nb">users</span>      <span class="o">=</span> list<span class="o">(</span>string<span class="o">)</span>
 <span class="o">}))</span>
 <span class="o">}))</span>
<span class="o">}</span>

variable <span class="s2">"groups"</span> <span class="o">{</span>
 description <span class="o">=</span> <span class="s2">"A map of groups with their associated user emails."</span>
 <span class="nb">type</span>        <span class="o">=</span> map<span class="o">(</span>list<span class="o">(</span>string<span class="o">))</span>
<span class="o">}</span></code></pre></figure>

<ul>
  <li>now is the place we can reuse the module to create the root “terraform.tfvars” which provides the actual values for the variables to define each assignment request. in future we only set each request here as environment variables, and then apply the terraform module.</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">aws_region <span class="o">=</span> <span class="s2">"ap-southeast-2"</span>

permission_sets <span class="o">=</span> <span class="o">{</span>
 <span class="c"># The 1st request RDS read-only permission sets and user assignment redefine in the module using variables</span>
 <span class="s2">"RDS-ReadOnly"</span> <span class="o">=</span> <span class="o">{</span>
 description     <span class="o">=</span> <span class="s2">"Read-only access to RDS resources"</span>
 session_duration <span class="o">=</span> <span class="s2">"PT1H"</span>
 managed_policies <span class="o">=</span> <span class="o">[</span>
 <span class="s2">"arn:aws:iam::aws:policy/AmazonRDSReadOnlyAccess"</span>,
 <span class="o">]</span>
 accounts <span class="o">=</span> <span class="o">{</span>
 <span class="s2">"123456789"</span> <span class="o">=</span> <span class="o">{</span>
 account_id <span class="o">=</span> <span class="s2">"123456789"</span>
 <span class="nb">users</span>      <span class="o">=</span> <span class="o">[</span><span class="s2">"user1@company.com"</span><span class="o">]</span>
 <span class="o">}</span>
 <span class="o">}</span>
 <span class="o">}</span>
 <span class="c"># the 2nd request security full access for ACM redefine in the module using variables</span>
 <span class="s2">"ACM-FullAccess"</span> <span class="o">=</span> <span class="o">{</span>
 description     <span class="o">=</span> <span class="s2">"Full access to AWS Certificate Manager"</span>
 session_duration <span class="o">=</span> <span class="s2">"PT1H"</span>
 managed_policies <span class="o">=</span> <span class="o">[</span>
 <span class="s2">"arn:aws:iam::aws:policy/AWSCertificateManagerFullAccess"</span>,
 <span class="o">]</span>
 accounts <span class="o">=</span> <span class="o">{</span>
 <span class="s2">"12345678901"</span> <span class="o">=</span> <span class="o">{</span>
 account_id <span class="o">=</span> <span class="s2">"12345678901"</span>
 <span class="nb">users</span>      <span class="o">=</span> <span class="o">[</span><span class="s2">"security1@company.com"</span>, <span class="s2">"security2@company.com"</span>, <span class="s2">"security3@company.com"</span><span class="o">]</span>
 <span class="o">}</span>,
 <span class="s2">"12345678902"</span> <span class="o">=</span> <span class="o">{</span>
 account_id <span class="o">=</span> <span class="s2">"12345678902"</span>
 <span class="nb">users</span>      <span class="o">=</span> <span class="o">[</span><span class="s2">"security1@company.com"</span>, <span class="s2">"security2@company.com"</span>, <span class="s2">"security3@company.com"</span><span class="o">]</span>
 <span class="o">}</span>,
 <span class="s2">"12345678903"</span> <span class="o">=</span> <span class="o">{</span>
 account_id <span class="o">=</span> <span class="s2">"12345678903"</span>
 <span class="nb">users</span>      <span class="o">=</span> <span class="o">[</span><span class="s2">"security1@company.com"</span>, <span class="s2">"security2@company.com"</span>, <span class="s2">"security3@company.com"</span><span class="o">]</span>
 <span class="o">}</span>
 <span class="o">}</span>
 <span class="o">}</span>

 <span class="c"># Add 3rd request a developer needs S3 full access for 2 AWS accounts redefine in the module using variables</span>
 <span class="s2">"S3-ModifyAccess"</span> <span class="o">=</span> <span class="o">{</span>
 description     <span class="o">=</span> <span class="s2">"Modify access to S3 buckets"</span>
 session_duration <span class="o">=</span> <span class="s2">"PT1H"</span>
 managed_policies <span class="o">=</span> <span class="o">[</span>
 <span class="s2">"arn:aws:iam::aws:policy/AmazonS3FullAccess"</span>,
 <span class="o">]</span>
 accounts <span class="o">=</span> <span class="o">{</span>
 <span class="s2">"12345678902"</span> <span class="o">=</span> <span class="o">{</span>
 account_id <span class="o">=</span> <span class="s2">"12345678902"</span>
 <span class="nb">users</span>      <span class="o">=</span> <span class="o">[</span><span class="s2">"developer1@company.com"</span><span class="o">]</span>
 <span class="o">}</span>,
 <span class="s2">"12345678903"</span> <span class="o">=</span> <span class="o">{</span>
 account_id <span class="o">=</span> <span class="s2">"12345678903"</span>
 <span class="nb">users</span>      <span class="o">=</span> <span class="o">[</span><span class="s2">"developer1@company.com"</span><span class="o">]</span>
 <span class="o">}</span>
 <span class="o">}</span>
 <span class="o">}</span>
<span class="o">}</span>

<span class="nb">groups</span> <span class="o">=</span> <span class="o">{</span>
 <span class="s2">"AD-RDS-EAD-ONLY"</span> <span class="o">=</span> <span class="o">[</span><span class="s2">"user1@company.com"</span><span class="o">]</span>
 <span class="s2">"AD-ACM-FULL-ACCESS"</span> <span class="o">=</span> <span class="o">[</span><span class="s2">"security1@company.com"</span>, <span class="s2">"security2@company.com"</span>, <span class="s2">"security3@company.com"</span><span class="o">]</span>
 <span class="c"># Optionally add a group for the developer, if needed:</span>
 <span class="c"># "AD-S3-Modify-Access" = ["developer1@company.com"]</span>
<span class="o">}</span></code></pre></figure>

<p><b> Conclusion</b></p>

<p>Now, we can achieve the task individually via terraform code and a Terraform module to handle the creation of AWS SSO users, This setup combines all three requests into a single Terraform configuration, leveraging the reusable module for creating permission sets and managing user assignments, it is more efficient, dynamically, and reusable. In future, we only define permission sets and maintain new users and assignments in the environment variables .tf file, then run Terraform apply to get the job done. The change also can be tracked when leveraging Git as version control.</p>

<p><a href="https://girishcodealchemy.medium.com/streamlining-aws-sso-in-complex-multi-account-environments-e82025792d11">Streamlining AWS SSO in Complex Multi-Account Environments</a></p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[Challange About AWS SSO User Assignment]]></summary></entry><entry><title type="html">Python: File Handling for EC2 tagging</title><link href="http://localhost:4000/jekyll/cat2/2024/05/17/py2.html" rel="alternate" type="text/html" title="Python: File Handling for EC2 tagging" /><published>2024-05-17T10:15:29+10:00</published><updated>2024-05-17T10:15:29+10:00</updated><id>http://localhost:4000/jekyll/cat2/2024/05/17/py2</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2024/05/17/py2.html"><![CDATA[<p><b> About Python File Handling</b></p>

<p>In the previous post I developed shell script + awscli to apply <a href="https://zackz.online/jekyll/cat2/2024/05/01/AWS-tagging.html">aws EC2 tages</a>, since the last post we discovered <a href="https://zackz.online/jekyll/cat2/2024/05/16/py1.html">Python Boto3</a> scripts for AWS resource automation and management, I think it is time to improve the EC2 tagging task with Python and boto3, together with file handling to achieve:</p>

<ol>
  <li>
    <p>List and export ec2 information to a CSV file (instanceID, default instance name, Existing tags)</p>
  </li>
  <li>
    <p>define 4 mandatory tags in CSV header (Env, BizOwner, Technology, Project)</p>
  </li>
  <li>
    <p>validate exported tags against the 4 mandatory new tags, if any of the new mandatory tags exists, then keep the tage and value, if any of the new mandatory tags do not exist, add the key and leave the value blank</p>
  </li>
  <li>
    <p>Get csv file fill with mandatory tags input from Biz team (manual work)</p>
  </li>
  <li>
    <p>open the updated CSV file, apply the mandatory tags based on the input value</p>
  </li>
  <li>
    <p>create and trigger lambda function with aws config rules to enforce 4 mandatory tags whenever a new instance launch  </p>
  </li>
</ol>

<p><b> List and export ec2 information to a CSV</b></p>

<ul>
  <li>Here we need Python libraries for “boto3” and “csv”, to call boto3 sessions to retrieve EC2 information, then use Python “with open” and “for” loops to write each ec2 info to a csv file, also add mandatory tags write in the header fields “Env”, “BizOwner”, “Technology”, “Project”:</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">root@ubt-server:~/pythonwork/new# vim export1.py
<span class="c"># Import libiaries</span>
import boto3
import csv
<span class="c"># Define the mandatory tags</span>
MANDATORY_TAGS <span class="o">=</span> <span class="o">[</span><span class="s2">"Env"</span>, <span class="s2">"BizOwner"</span>, <span class="s2">"Technology"</span>, <span class="s2">"Project"</span><span class="o">]</span>
<span class="c"># Initialize boto3 clients</span>
ec2 <span class="o">=</span> boto3.client<span class="o">(</span><span class="s1">'ec2'</span><span class="o">)</span>

def list_ec2_instances<span class="o">()</span>:
    instances <span class="o">=</span> <span class="o">[]</span>
    response <span class="o">=</span> ec2.describe_instances<span class="o">()</span>
    <span class="k">for </span>reservation <span class="k">in </span>response[<span class="s1">'Reservations'</span><span class="o">]</span>:
        <span class="k">for </span>instance <span class="k">in </span>reservation[<span class="s1">'Instances'</span><span class="o">]</span>:
            instance_id <span class="o">=</span> instance[<span class="s1">'InstanceId'</span><span class="o">]</span>
            default_name <span class="o">=</span> next<span class="o">((</span>tag[<span class="s1">'Value'</span><span class="o">]</span> <span class="k">for </span>tag <span class="k">in </span>instance.get<span class="o">(</span><span class="s1">'Tags'</span>, <span class="o">[])</span> <span class="k">if </span>tag[<span class="s1">'Key'</span><span class="o">]</span> <span class="o">==</span> <span class="s1">'Name'</span><span class="o">)</span>, <span class="s1">'No Name'</span><span class="o">)</span>
            tags <span class="o">=</span> <span class="o">{</span>tag[<span class="s1">'Key'</span><span class="o">]</span>: tag[<span class="s1">'Value'</span><span class="o">]</span> <span class="k">for </span>tag <span class="k">in </span>instance.get<span class="o">(</span><span class="s1">'Tags'</span>, <span class="o">[])}</span>
            instance_info <span class="o">=</span> <span class="o">{</span>
                <span class="s1">'InstanceId'</span>: instance_id,
                <span class="s1">'DefaultName'</span>: default_name,
                <span class="k">**</span>tags
            <span class="o">}</span>
            <span class="c"># Ensure mandatory tags are included with empty values if not present</span>
            <span class="k">for </span>mandatory_tag <span class="k">in </span>MANDATORY_TAGS:
                <span class="k">if </span>mandatory_tag not <span class="k">in </span>instance_info:
                    instance_info[mandatory_tag] <span class="o">=</span> <span class="s1">''</span>
            instances.append<span class="o">(</span>instance_info<span class="o">)</span>
    <span class="k">return </span>instances

<span class="c"># Define export to csv</span>
def export_to_csv<span class="o">(</span>instances, <span class="nv">filename</span><span class="o">=</span><span class="s1">'ec2_instances.csv'</span><span class="o">)</span>:
    <span class="c"># Collect all possible tag keys</span>
    all_tags <span class="o">=</span> <span class="nb">set</span><span class="o">()</span>
    <span class="k">for </span>instance <span class="k">in </span>instances:
        all_tags.update<span class="o">(</span>instance.keys<span class="o">())</span>
    
    <span class="c"># Ensure mandatory tags are included in the header</span>
    all_tags.update<span class="o">(</span>MANDATORY_TAGS<span class="o">)</span>
    fieldnames <span class="o">=</span> <span class="o">[</span><span class="s1">'InstanceId'</span>, <span class="s1">'DefaultName'</span><span class="o">]</span> + sorted<span class="o">(</span>all_tags - <span class="o">{</span><span class="s1">'InstanceId'</span>, <span class="s1">'DefaultName'</span><span class="o">})</span>
    
    with open<span class="o">(</span>filename, <span class="s1">'w'</span>, <span class="nv">newline</span><span class="o">=</span><span class="s1">''</span><span class="o">)</span> as csvfile:
        writer <span class="o">=</span> csv.DictWriter<span class="o">(</span>csvfile, <span class="nv">fieldnames</span><span class="o">=</span>fieldnames<span class="o">)</span>
        writer.writeheader<span class="o">()</span>
        <span class="k">for </span>instance <span class="k">in </span>instances:
            writer.writerow<span class="o">(</span>instance<span class="o">)</span>

def main<span class="o">()</span>:
    instances <span class="o">=</span> list_ec2_instances<span class="o">()</span>
    export_to_csv<span class="o">(</span>instances<span class="o">)</span>
    print<span class="o">(</span><span class="s2">"CSV export complete. Please update the mandatory tags in 'ec2_instances.csv'."</span><span class="o">)</span>

<span class="k">if </span>__name__ <span class="o">==</span> <span class="s1">'__main__'</span>:
    main<span class="o">()</span>

root@ubt-server:~/pythonwork/new# python3 export1.py 
CSV <span class="nb">export </span>complete. Please update the mandatory tags <span class="k">in</span> <span class="s1">'ec2_instances.csv'</span>.</code></pre></figure>

<p><img src="/assets/py2-1.png" alt="image tooltip here" /></p>

<ul>
  <li>next download and update ‘ec2_instances.csv’ with all required tags, then remane and upload as ‘ec2_instances_updated.csv’, create second script “update1.py” to apply new tags</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">root@ubt-server:~/pythonwork/new# vim update1.py

import boto3
import csv

<span class="c"># Define the mandatory tags</span>
MANDATORY_TAGS <span class="o">=</span> <span class="o">[</span><span class="s2">"Env"</span>, <span class="s2">"BizOwner"</span>, <span class="s2">"Technology"</span>, <span class="s2">"Project"</span><span class="o">]</span>

def update_tags_from_csv<span class="o">(</span><span class="nv">filename</span><span class="o">=</span><span class="s1">'ec2_instances_updated.csv'</span><span class="o">)</span>:
    ec2 <span class="o">=</span> boto3.client<span class="o">(</span><span class="s1">'ec2'</span><span class="o">)</span>
    with open<span class="o">(</span>filename, <span class="nv">newline</span><span class="o">=</span><span class="s1">''</span><span class="o">)</span> as csvfile:
        reader <span class="o">=</span> csv.DictReader<span class="o">(</span>csvfile<span class="o">)</span>
        <span class="k">for </span>row <span class="k">in </span>reader:
            instance_id <span class="o">=</span> row[<span class="s1">'InstanceId'</span><span class="o">]</span>
            tags <span class="o">=</span> <span class="o">[{</span><span class="s1">'Key'</span>: tag, <span class="s1">'Value'</span>: row[tag]<span class="o">}</span> <span class="k">for </span>tag <span class="k">in </span>MANDATORY_TAGS <span class="k">if </span>row[tag]]
            <span class="k">if </span>tags:
                ec2.create_tags<span class="o">(</span><span class="nv">Resources</span><span class="o">=[</span>instance_id], <span class="nv">Tags</span><span class="o">=</span>tags<span class="o">)</span>

def main<span class="o">()</span>:
    update_tags_from_csv<span class="o">()</span>
    print<span class="o">(</span><span class="s2">"Tags updated successfully from 'ec2_instances_updated.csv'."</span><span class="o">)</span>

<span class="k">if </span>__name__ <span class="o">==</span> <span class="s1">'__main__'</span>:
    main<span class="o">()</span>

root@ubt-server:~/pythonwork/new# python3 update1.py 
Tags updated successfully from <span class="s1">'ec2_instances_updated.csv'</span>.</code></pre></figure>

<p>Now the new tags had been applied.</p>

<p><img src="/assets/py2-2.png" alt="image tooltip here" /></p>

<p><b> How about managing tags for multiple AWS accounts </b></p>

<p>Considering we have 20+ AWS accounts across the company and with more than 200 EC2 instances that need to apply tagging strategy, here I will</p>

<ul>
  <li>use AWScli profile to configure each AWS account creds, here I will use my own 2 AWS accounts (ZackBlog and JoeSite) to create AWScli profiles to validate the Python scripts</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># Add account creds into ~/.aws/credentials</span>
vim ~/.aws/credentials

<span class="o">[</span>aws_account_zackblog]
aws_access_key_id <span class="o">=</span> xxxx
aws_secret_access_key <span class="o">=</span> yyyy

<span class="o">[</span>aws_account_joesite]
aws_access_key_id <span class="o">=</span> zzzz
aws_secret_access_key <span class="o">=</span> yyyy</code></pre></figure>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># add profiles into ~/.aws/config</span>
vim ~/.aws/config

<span class="o">[</span>profile aws_account_zackblog]
region <span class="o">=</span> ap-southeast-2

<span class="o">[</span>profile aws_account_joesite]
region <span class="o">=</span> ap-southeast-2</code></pre></figure>

<ul>
  <li>now update Python scripts to call each account profile to apply all 20+ AWS accounts in sequence.</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">root@ubt-server:~/pythonwork# <span class="nb">mkdir </span>mutiple-aws
root@ubt-server:~/pythonwork# <span class="nb">cd </span>mutiple-aws/
root@ubt-server:~/pythonwork/mutiple-aws# vim export2.py

import boto3
import csv
from botocore.exceptions import ProfileNotFound

<span class="c"># Define the mandatory tags</span>
MANDATORY_TAGS <span class="o">=</span> <span class="o">[</span><span class="s2">"Env"</span>, <span class="s2">"BizOwner"</span>, <span class="s2">"Technology"</span>, <span class="s2">"Project"</span><span class="o">]</span>

<span class="c"># List of AWS account profiles</span>
AWS_PROFILES <span class="o">=</span> <span class="o">[</span><span class="s2">"aws_account_zackblog"</span>, <span class="s2">"aws_account_joesite"</span><span class="o">]</span>  <span class="c"># Add more profiles as needed</span>

def list_ec2_instances<span class="o">(</span>profile_name<span class="o">)</span>:
    session <span class="o">=</span> boto3.Session<span class="o">(</span><span class="nv">profile_name</span><span class="o">=</span>profile_name<span class="o">)</span>
    ec2 <span class="o">=</span> session.client<span class="o">(</span><span class="s1">'ec2'</span><span class="o">)</span>
    instances <span class="o">=</span> <span class="o">[]</span>
    response <span class="o">=</span> ec2.describe_instances<span class="o">()</span>
    <span class="k">for </span>reservation <span class="k">in </span>response[<span class="s1">'Reservations'</span><span class="o">]</span>:
        <span class="k">for </span>instance <span class="k">in </span>reservation[<span class="s1">'Instances'</span><span class="o">]</span>:
            instance_id <span class="o">=</span> instance[<span class="s1">'InstanceId'</span><span class="o">]</span>
            default_name <span class="o">=</span> next<span class="o">((</span>tag[<span class="s1">'Value'</span><span class="o">]</span> <span class="k">for </span>tag <span class="k">in </span>instance.get<span class="o">(</span><span class="s1">'Tags'</span>, <span class="o">[])</span> <span class="k">if </span>tag[<span class="s1">'Key'</span><span class="o">]</span> <span class="o">==</span> <span class="s1">'Name'</span><span class="o">)</span>, <span class="s1">'No Name'</span><span class="o">)</span>
            tags <span class="o">=</span> <span class="o">{</span>tag[<span class="s1">'Key'</span><span class="o">]</span>: tag[<span class="s1">'Value'</span><span class="o">]</span> <span class="k">for </span>tag <span class="k">in </span>instance.get<span class="o">(</span><span class="s1">'Tags'</span>, <span class="o">[])}</span>
            instance_info <span class="o">=</span> <span class="o">{</span>
                <span class="s1">'InstanceId'</span>: instance_id,
                <span class="s1">'DefaultName'</span>: default_name,
                <span class="k">**</span>tags
            <span class="o">}</span>
            <span class="c"># Ensure mandatory tags are included with empty values if not present</span>
            <span class="k">for </span>mandatory_tag <span class="k">in </span>MANDATORY_TAGS:
                <span class="k">if </span>mandatory_tag not <span class="k">in </span>instance_info:
                    instance_info[mandatory_tag] <span class="o">=</span> <span class="s1">''</span>
            instances.append<span class="o">(</span>instance_info<span class="o">)</span>
    <span class="k">return </span>instances

def export_to_csv<span class="o">(</span>instances, profile_name<span class="o">)</span>:
    filename <span class="o">=</span> f<span class="s2">"ec2_instances_{profile_name}.csv"</span>
    <span class="c"># Collect all possible tag keys</span>
    all_tags <span class="o">=</span> <span class="nb">set</span><span class="o">()</span>
    <span class="k">for </span>instance <span class="k">in </span>instances:
        all_tags.update<span class="o">(</span>instance.keys<span class="o">())</span>
    
    <span class="c"># Ensure mandatory tags are included in the header</span>
    all_tags.update<span class="o">(</span>MANDATORY_TAGS<span class="o">)</span>
    fieldnames <span class="o">=</span> <span class="o">[</span><span class="s1">'InstanceId'</span>, <span class="s1">'DefaultName'</span><span class="o">]</span> + sorted<span class="o">(</span>all_tags - <span class="o">{</span><span class="s1">'InstanceId'</span>, <span class="s1">'DefaultName'</span><span class="o">})</span>
    
    with open<span class="o">(</span>filename, <span class="s1">'w'</span>, <span class="nv">newline</span><span class="o">=</span><span class="s1">''</span><span class="o">)</span> as csvfile:
        writer <span class="o">=</span> csv.DictWriter<span class="o">(</span>csvfile, <span class="nv">fieldnames</span><span class="o">=</span>fieldnames<span class="o">)</span>
        writer.writeheader<span class="o">()</span>
        <span class="k">for </span>instance <span class="k">in </span>instances:
            writer.writerow<span class="o">(</span>instance<span class="o">)</span>

def process_all_profiles<span class="o">()</span>:
    <span class="k">for </span>profile <span class="k">in </span>AWS_PROFILES:
        try:
            print<span class="o">(</span>f<span class="s2">"Processing profile: {profile}"</span><span class="o">)</span>
            instances <span class="o">=</span> list_ec2_instances<span class="o">(</span>profile<span class="o">)</span>
            export_to_csv<span class="o">(</span>instances, profile<span class="o">)</span>
            print<span class="o">(</span>f<span class="s2">"CSV export complete for profile {profile}. Please update the mandatory tags in 'ec2_instances_{profile}.csv'."</span><span class="o">)</span>
        except ProfileNotFound:
            print<span class="o">(</span>f<span class="s2">"Profile {profile} not found. Skipping."</span><span class="o">)</span>

<span class="k">if </span>__name__ <span class="o">==</span> <span class="s1">'__main__'</span>:
    process_all_profiles<span class="o">()</span></code></pre></figure>

<ul>
  <li>export 2 csv files for each aws account based on given profile, update mandatory tags in the 2 csv files, then upload and rename as <em>updated</em></li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># export 2 csv files</span>
root@ubt-server:~/pythonwork/mutiple-aws# python3 export2.py 
Processing profile: aws_account_zackblog
CSV <span class="nb">export complete </span><span class="k">for </span>profile aws_account_zackblog. Please update the mandatory tags <span class="k">in</span> <span class="s1">'ec2_instances_aws_account_zackblog.csv'</span><span class="nb">.</span>
Processing profile: aws_account_joesite
CSV <span class="nb">export complete </span><span class="k">for </span>profile aws_account_joesite. Please update the mandatory tags <span class="k">in</span> <span class="s1">'ec2_instances_aws_account_joesite.csv'</span><span class="nb">.</span>

<span class="c"># update all mandatory tags in the files</span>
root@ubt-server:~/pythonwork/mutiple-aws# <span class="nb">cat </span>ec2_instances_updated_aws_account_zackblog.csv 

InstanceId,DefaultName,BizOwner,Env,Name,Project,Technology,Tuned,zz1,zz2
i-076226daa5aaf7cf2,zack-blog,Zack,Prod,zack-blog,zack-web,Jekyll,,aa1,aa2
i-0b5c0fec84073a6d9,Py_test_zackweb,Zack,Testing,Py_test_zackweb,python-test,None,Yes,,

root@ubt-server:~/pythonwork/mutiple-aws# <span class="nb">cat </span>ec2_instances_updated_aws_account_joesite.csv 

InstanceId,DefaultName,BizOwner,Env,Location,Name,Project,Technology,TimeLaunched
i-012fb886802435ff2,joe-account-py-test,Joe,Prod,SYD,joe-account-py-test,joesite,Ruby-Jekyll,
i-052b0511339457efc,joe-site,Joe,Testing,,joe-site,Python-test,None,20240301</code></pre></figure>

<ul>
  <li>now create python script “update_tags_2.p” to apply new tags for 2 aws accounts by given profile</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">root@ubt-server:~/pythonwork/mutiple-aws# vim update_tags_2.py
<span class="c"># Import libiaries</span>
import boto3
import csv
from botocore.exceptions import ProfileNotFound

<span class="c"># Define the mandatory tags</span>
MANDATORY_TAGS <span class="o">=</span> <span class="o">[</span><span class="s2">"Env"</span>, <span class="s2">"BizOwner"</span>, <span class="s2">"Technology"</span>, <span class="s2">"Project"</span><span class="o">]</span>

<span class="c"># List of AWS account profiles</span>
AWS_PROFILES <span class="o">=</span> <span class="o">[</span><span class="s2">"aws_account_zackblog"</span>, <span class="s2">"aws_account_joesite"</span><span class="o">]</span>  <span class="c"># Add more profiles as needed</span>

def update_tags_from_csv<span class="o">(</span>profile_name<span class="o">)</span>:
    filename <span class="o">=</span> f<span class="s2">"ec2_instances_updated_{profile_name}.csv"</span>
    session <span class="o">=</span> boto3.Session<span class="o">(</span><span class="nv">profile_name</span><span class="o">=</span>profile_name<span class="o">)</span>
    ec2 <span class="o">=</span> session.client<span class="o">(</span><span class="s1">'ec2'</span><span class="o">)</span>
    with open<span class="o">(</span>filename, <span class="nv">newline</span><span class="o">=</span><span class="s1">''</span><span class="o">)</span> as csvfile:
        reader <span class="o">=</span> csv.DictReader<span class="o">(</span>csvfile<span class="o">)</span>
        <span class="k">for </span>row <span class="k">in </span>reader:
            instance_id <span class="o">=</span> row[<span class="s1">'InstanceId'</span><span class="o">]</span>
            tags <span class="o">=</span> <span class="o">[{</span><span class="s1">'Key'</span>: tag, <span class="s1">'Value'</span>: row[tag]<span class="o">}</span> <span class="k">for </span>tag <span class="k">in </span>MANDATORY_TAGS <span class="k">if </span>row[tag]]
            <span class="k">if </span>tags:
                ec2.create_tags<span class="o">(</span><span class="nv">Resources</span><span class="o">=[</span>instance_id], <span class="nv">Tags</span><span class="o">=</span>tags<span class="o">)</span>

def process_all_profiles<span class="o">()</span>:
    <span class="k">for </span>profile <span class="k">in </span>AWS_PROFILES:
        try:
            print<span class="o">(</span>f<span class="s2">"Processing profile: {profile}"</span><span class="o">)</span>
            update_tags_from_csv<span class="o">(</span>profile<span class="o">)</span>
            print<span class="o">(</span>f<span class="s2">"Tags updated successfully from 'ec2_instances_updated_{profile}.csv' for profile {profile}."</span><span class="o">)</span>
        except ProfileNotFound:
            print<span class="o">(</span>f<span class="s2">"Profile {profile} not found. Skipping."</span><span class="o">)</span>
        except FileNotFoundError:
            print<span class="o">(</span>f<span class="s2">"Updated CSV file for profile {profile} not found. Skipping."</span><span class="o">)</span>

<span class="k">if </span>__name__ <span class="o">==</span> <span class="s1">'__main__'</span>:
    process_all_profiles<span class="o">()</span>

<span class="c"># run to apply tags</span>
root@ubt-server:~/pythonwork/mutiple-aws# python3 update_tags_2.py 
Processing profile: aws_account_zackblog
Tags updated successfully from <span class="s1">'ec2_instances_updated_aws_account_zackblog.csv'</span> <span class="k">for </span>profile aws_account_zackblog.

Processing profile: aws_account_joesite
Tags updated successfully from <span class="s1">'ec2_instances_updated_aws_account_joesite.csv'</span> <span class="k">for </span>profile aws_account_joesite.</code></pre></figure>

<ul>
  <li>now double check the tags for both accounts</li>
</ul>

<p><img src="/assets/py2-3.png" alt="image tooltip here" />
<img src="/assets/py2-4.png" alt="image tooltip here" /></p>

<p><b> Conclusion</b></p>

<p>Now we can use Python Boto3 and file handling to achieve mutiple-aws account EC2 tagging. With Python “csv” library, functions like “csv.DictReader”, “with open” and “csv.DictWriter” to open, update and export CSV file, Python also supports handling data in JSON format with dictionary.</p>

<p>In the next post I will see how to use Python Flask to redesign Zack’s blog for Web application development.</p>

<h1>====================</h1>

<p><b> Just got another task to create more users in all account with python boto3</b></p>

<ul>
  <li>a csv file with list of users will be created, aws profile configured for all aws accounts</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">root@ubt-server:~/pythonwork/user_creation# <span class="nb">cat </span>all_users.csv 
Username
ZackZ
BobJ
MattS</code></pre></figure>

<ul>
  <li>a python script with bellow IAM user creation</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">root@ubt-server:~/pythonwork/user_creation# vim more_user_from_csv.py

import boto3
import csv
from botocore.exceptions import ProfileNotFound, ClientError

<span class="c"># List of AWS account profiles</span>
AWS_PROFILES <span class="o">=</span> <span class="o">[</span><span class="s2">"aws_account_zackblog"</span>, <span class="s2">"aws_account_joesite"</span><span class="o">]</span>  <span class="c"># Add more profiles as needed</span>

<span class="c"># IAM User details</span>
PASSWORD <span class="o">=</span> <span class="s2">"xxxxxxxx"</span>
POLICY_ARN <span class="o">=</span> <span class="s2">"arn:aws:iam::aws:policy/AdministratorAccess"</span>
CSV_FILE <span class="o">=</span> <span class="s2">"all_users.csv"</span>

def read_users_from_csv<span class="o">(</span>filename<span class="o">)</span>:
    <span class="nb">users</span> <span class="o">=</span> <span class="o">[]</span>
    with open<span class="o">(</span>filename, <span class="nv">newline</span><span class="o">=</span><span class="s1">''</span><span class="o">)</span> as csvfile:
        reader <span class="o">=</span> csv.DictReader<span class="o">(</span>csvfile<span class="o">)</span>
        <span class="k">for </span>row <span class="k">in </span>reader:
            users.append<span class="o">(</span>row[<span class="s1">'Username'</span><span class="o">])</span>
    <span class="k">return </span><span class="nb">users

</span>def create_iam_user<span class="o">(</span>profile_name, user_name<span class="o">)</span>:
    session <span class="o">=</span> boto3.Session<span class="o">(</span><span class="nv">profile_name</span><span class="o">=</span>profile_name<span class="o">)</span>
    iam <span class="o">=</span> session.client<span class="o">(</span><span class="s1">'iam'</span><span class="o">)</span>
    
    try:
        <span class="c"># Create IAM user</span>
        iam.create_user<span class="o">(</span><span class="nv">UserName</span><span class="o">=</span>user_name<span class="o">)</span>
        print<span class="o">(</span>f<span class="s2">"User {user_name} created in profile {profile_name}."</span><span class="o">)</span>

        <span class="c"># Create login profile for console access</span>
        iam.create_login_profile<span class="o">(</span>
            <span class="nv">UserName</span><span class="o">=</span>user_name,
            <span class="nv">Password</span><span class="o">=</span>PASSWORD,
            <span class="nv">PasswordResetRequired</span><span class="o">=</span>False
        <span class="o">)</span>
        print<span class="o">(</span>f<span class="s2">"Login profile created for user {user_name} in profile {profile_name}."</span><span class="o">)</span>

        <span class="c"># Attach AdministratorAccess policy</span>
        iam.attach_user_policy<span class="o">(</span>
            <span class="nv">UserName</span><span class="o">=</span>user_name,
            <span class="nv">PolicyArn</span><span class="o">=</span>POLICY_ARN
        <span class="o">)</span>
        print<span class="o">(</span>f<span class="s2">"AdministratorAccess policy attached to user {user_name} in profile {profile_name}."</span><span class="o">)</span>

    except ClientError as e:
        <span class="k">if </span>e.response[<span class="s1">'Error'</span><span class="o">][</span><span class="s1">'Code'</span><span class="o">]</span> <span class="o">==</span> <span class="s1">'EntityAlreadyExists'</span>:
            print<span class="o">(</span>f<span class="s2">"User {user_name} already exists in profile {profile_name}."</span><span class="o">)</span>
        <span class="k">else</span>:
            print<span class="o">(</span>f<span class="s2">"Error creating user {user_name} in profile {profile_name}: {e}"</span><span class="o">)</span>

def process_all_profiles<span class="o">(</span><span class="nb">users</span><span class="o">)</span>:
    <span class="k">for </span>profile <span class="k">in </span>AWS_PROFILES:
        try:
            print<span class="o">(</span>f<span class="s2">"Processing profile: {profile}"</span><span class="o">)</span>
            <span class="k">for </span>user <span class="k">in </span><span class="nb">users</span>:
                create_iam_user<span class="o">(</span>profile, user<span class="o">)</span>
        except ProfileNotFound:
            print<span class="o">(</span>f<span class="s2">"Profile {profile} not found. Skipping."</span><span class="o">)</span>

<span class="k">if </span>__name__ <span class="o">==</span> <span class="s1">'__main__'</span>:
    <span class="nb">users</span> <span class="o">=</span> read_users_from_csv<span class="o">(</span>CSV_FILE<span class="o">)</span>
    process_all_profiles<span class="o">(</span><span class="nb">users</span><span class="o">)</span></code></pre></figure>

<ul>
  <li>Go to create all users</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">root@ubt-server:~/pythonwork/user_creation# python3 more_user_from_csv.py 

Processing profile: aws_account_zackblog

User ZackZ created <span class="k">in </span>profile aws_account_zackblog.
Login profile created <span class="k">for </span>user ZackZ <span class="k">in </span>profile aws_account_zackblog.
AdministratorAccess policy attached to user ZackZ <span class="k">in </span>profile aws_account_zackblog.

User BobJ created <span class="k">in </span>profile aws_account_zackblog.
Login profile created <span class="k">for </span>user BobJ <span class="k">in </span>profile aws_account_zackblog.
AdministratorAccess policy attached to user BobJ <span class="k">in </span>profile aws_account_zackblog.

User MattS created <span class="k">in </span>profile aws_account_zackblog.
Login profile created <span class="k">for </span>user MattS <span class="k">in </span>profile aws_account_zackblog.
AdministratorAccess policy attached to user MattS <span class="k">in </span>profile aws_account_zackblog.

Processing profile: aws_account_joesite

User ZackZ created <span class="k">in </span>profile aws_account_joesite.
Login profile created <span class="k">for </span>user ZackZ <span class="k">in </span>profile aws_account_joesite.
AdministratorAccess policy attached to user ZackZ <span class="k">in </span>profile aws_account_joesite.

User BobJ created <span class="k">in </span>profile aws_account_joesite.
Login profile created <span class="k">for </span>user BobJ <span class="k">in </span>profile aws_account_joesite.
AdministratorAccess policy attached to user BobJ <span class="k">in </span>profile aws_account_joesite.

User MattS created <span class="k">in </span>profile aws_account_joesite.
Login profile created <span class="k">for </span>user MattS <span class="k">in </span>profile aws_account_joesite.
AdministratorAccess policy attached to user MattS <span class="k">in </span>profile aws_account_joesite.</code></pre></figure>

<p><img src="/assets/py2-5.png" alt="image tooltip here" /></p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[About Python File Handling]]></summary></entry><entry><title type="html">Python: Boto3 for AWS</title><link href="http://localhost:4000/jekyll/cat2/2024/05/16/py1.html" rel="alternate" type="text/html" title="Python: Boto3 for AWS" /><published>2024-05-16T10:15:29+10:00</published><updated>2024-05-16T10:15:29+10:00</updated><id>http://localhost:4000/jekyll/cat2/2024/05/16/py1</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2024/05/16/py1.html"><![CDATA[<p><b> About Boto3 </b></p>

<p>Boto3 is the Amazon Web Services (AWS) Software Development Kit (SDK) for Python. It enables developers to build software that uses Amazon services like EC2, S3, RDS, etc.</p>

<p>I will build a portable python3.9 + Boto3 docker environment to test some AWS automation tasks.</p>

<p><b> Build and run a docker with Python3.9 + Boto3 </b></p>

<p>As I do not want to install Python, Boto3, and AWScli on my local PC, creating a docker image with all software ready as a portable env is the best way to start.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">root@ubt-server:~# vim Dockerfile
<span class="c"># Build from python:3.9.19-alpine3.19</span>
From python:3.9.19-alpine3.19 
<span class="c"># install boto3 and alwcli</span>
RUN pip <span class="nb">install</span> <span class="nt">--upgrade</span> pip <span class="o">&amp;&amp;</span> <span class="se">\</span>
    pip <span class="nb">install</span> <span class="nt">--upgrade</span> awscli <span class="o">&amp;&amp;</span> <span class="se">\</span>
    pip <span class="nb">install</span> <span class="nt">--upgrade</span> boto3
<span class="c"># set work dir</span>
WORKDIR /work
<span class="c"># run Python</span>
CMD <span class="s2">"python"</span>
<span class="c"># build a docker image from the above Dockerfile </span>
root@ubt-server:~# docker image build <span class="nt">-t</span> zack_aws_boto3 <span class="nb">.</span>

<span class="c"># ls docker images </span>
root@ubt-server:~# docker image <span class="nb">ls
</span>REPOSITORY               TAG             IMAGE ID       CREATED         SIZE
zack_aws_boto3           v1              07a13f7801ed   1 days ago     998MB
zackpy                   latest          287ba6873741   4 days ago      48.2MB
zackz001/gitops-jekyll   latest          d92894f7be6d   6 days ago      70.9MB
postgres                 15.0            027eba2e8939   19 months ago   377MB

<span class="c"># run docker and mount local python work dir</span>
root@ubt-server:~/pythonwork# docker run <span class="nt">-ti</span> <span class="nt">-v</span> <span class="k">${</span><span class="nv">PWD</span><span class="k">}</span>:/work zack_aws_boto3:v1 bash
root@c04670a43564:/# 
root@c04670a43564:/# <span class="nb">cd </span>work <span class="o">&amp;&amp;</span> <span class="nb">ls</span>

<span class="c"># configure aws in the container</span>
root@c04670a43564:/work# aws configure 
AWS Access Key ID <span class="o">[</span><span class="k">****************</span>GFNW]: 
AWS Secret Access Key <span class="o">[</span><span class="k">****************</span>Db7O]: 
Default region name <span class="o">[</span>ap-southeast-2]: 
Default output format <span class="o">[</span>None]: 

<span class="c"># validate aws cred by listing ec2 instance id </span>
root@c04670a43564:/work# aws ec2 describe-instances <span class="nt">--query</span> <span class="s2">"Reservations[*].Instances[*].InstanceId"</span> <span class="nt">--output</span> json
<span class="o">[</span>
    <span class="o">[</span>
        <span class="s2">"i-076226daa5aaf7cf2"</span>
    <span class="o">]</span>
<span class="o">]</span></code></pre></figure>

<p><b>Manage AWS resource with Python Boto3 script</b></p>

<p>Here we have Python and boto3 env ready; I will list some aws tasks that I want to be achieved by Python scripts</p>

<ul>
  <li>List ec2 instance name, instanceID and state</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">root@ubt-server:~/pythonwork# vim app.py
<span class="c"># import boto3 library</span>
import boto3

def list_ec2_instances<span class="o">()</span>:
    <span class="c"># Create a session using default AWS profile</span>
    session <span class="o">=</span> boto3.Session<span class="o">()</span>
    <span class="c"># Create an EC2 client</span>
    ec2_client <span class="o">=</span> session.client<span class="o">(</span><span class="s1">'ec2'</span><span class="o">)</span>

    <span class="c"># Describe EC2 instances</span>
    response <span class="o">=</span> ec2_client.describe_instances<span class="o">()</span>

    <span class="c"># Iterate over the instances</span>
    <span class="k">for </span>reservation <span class="k">in </span>response[<span class="s1">'Reservations'</span><span class="o">]</span>:
        <span class="k">for </span>instance <span class="k">in </span>reservation[<span class="s1">'Instances'</span><span class="o">]</span>:
            <span class="c"># Get the instance ID</span>
            instance_id <span class="o">=</span> instance[<span class="s1">'InstanceId'</span><span class="o">]</span>
            
            <span class="c"># Get the instance state</span>
            instance_state <span class="o">=</span> instance[<span class="s1">'State'</span><span class="o">][</span><span class="s1">'Name'</span><span class="o">]</span>
            
            <span class="c"># Get the instance Name tag if exists</span>
            instance_name <span class="o">=</span> <span class="s1">'No Name'</span>
            <span class="k">if</span> <span class="s1">'Tags'</span> <span class="k">in </span>instance:
                <span class="k">for </span>tag <span class="k">in </span>instance[<span class="s1">'Tags'</span><span class="o">]</span>:
                    <span class="k">if </span>tag[<span class="s1">'Key'</span><span class="o">]</span> <span class="o">==</span> <span class="s1">'Name'</span>:
                        instance_name <span class="o">=</span> tag[<span class="s1">'Value'</span><span class="o">]</span>
                        <span class="nb">break</span>
            
            <span class="c"># Print instance ID, Name, and State</span>
            print<span class="o">(</span>f<span class="s2">"Instance ID: {instance_id}, Name: {instance_name}, State: {instance_state}"</span><span class="o">)</span>

<span class="k">if </span>__name__ <span class="o">==</span> <span class="s2">"__main__"</span>:
    list_ec2_instances<span class="o">()</span>

root@c04670a43564:/work# python app.py 
Instance ID: i-076226daa5aaf7cf2, Name: zack-blog, State: stopped</code></pre></figure>

<ul>
  <li>Filter ec2 instance without tag “owner”</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># create app-untagged.py</span>
root@ubt-server:~/pythonwork# vim app-untagged.py
import boto3

def get_untagged_ec2_instances<span class="o">()</span>:
    ec2_client <span class="o">=</span> boto3.client<span class="o">(</span><span class="s1">'ec2'</span><span class="o">)</span>
    response <span class="o">=</span> ec2_client.describe_instances<span class="o">()</span>
    
    untagged_instances <span class="o">=</span> <span class="o">[]</span>
    
    <span class="k">for </span>reservation <span class="k">in </span>response[<span class="s1">'Reservations'</span><span class="o">]</span>:
        <span class="k">for </span>instance <span class="k">in </span>reservation[<span class="s1">'Instances'</span><span class="o">]</span>:
            has_owner_tag <span class="o">=</span> False
            <span class="k">if</span> <span class="s1">'Tags'</span> <span class="k">in </span>instance:
                <span class="k">for </span>tag <span class="k">in </span>instance[<span class="s1">'Tags'</span><span class="o">]</span>:
                    <span class="k">if </span>tag[<span class="s1">'Key'</span><span class="o">]</span>.lower<span class="o">()</span> <span class="o">==</span> <span class="s1">'owner'</span>:
                        has_owner_tag <span class="o">=</span> True
                        <span class="nb">break</span>
            
            <span class="k">if </span>not has_owner_tag:
                instance_id <span class="o">=</span> instance[<span class="s1">'InstanceId'</span><span class="o">]</span>
                instance_state <span class="o">=</span> instance[<span class="s1">'State'</span><span class="o">][</span><span class="s1">'Name'</span><span class="o">]</span>
                untagged_instances.append<span class="o">({</span><span class="s1">'InstanceId'</span>: instance_id, <span class="s1">'State'</span>: instance_state<span class="o">})</span>
    
    <span class="k">return </span>untagged_instances

untagged_instances <span class="o">=</span> get_untagged_ec2_instances<span class="o">()</span>
print<span class="o">(</span><span class="s2">"Untagged Instances:"</span>, untagged_instances<span class="o">)</span>

<span class="c"># run script to filter untagged "owner" ec2 </span>
root@c04670a43564:/work# python app-untagged.py 
Untagged Instances: <span class="o">[{</span><span class="s1">'InstanceId'</span>: <span class="s1">'i-076226daa5aaf7cf2'</span>, <span class="s1">'State'</span>: <span class="s1">'stopped'</span><span class="o">}]</span></code></pre></figure>

<ul>
  <li>Create lambda function to list ebs volume snapshots older than 30 days and delete them</li>
</ul>

<p>To achieve this we need :</p>

<ol>
  <li>create lambda IAM role for lambda to manage EBS volume snapshot</li>
  <li>create bellow python lambda function</li>
  <li>zip and upload zip function</li>
  <li>create CloudWatch Event to Trigger run it every 30 days</li>
</ol>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># create lambda function to delete snapshots older than 30 days</span>
root@ubt-server:~/pythonwork# vim app-snapshot-older-30days.py
import boto3
from datetime import datetime, timezone, timedelta

def lambda_handler<span class="o">(</span>event, context<span class="o">)</span>:
    ec2_client <span class="o">=</span> boto3.client<span class="o">(</span><span class="s1">'ec2'</span><span class="o">)</span>
    
    <span class="c"># Get the current time</span>
    now <span class="o">=</span> datetime.now<span class="o">(</span>timezone.utc<span class="o">)</span>
    
    <span class="c"># Define the time threshold</span>
    time_threshold <span class="o">=</span> now - <span class="nb">time </span>delta<span class="o">(</span><span class="nv">days</span><span class="o">=</span>30<span class="o">)</span>
    
    <span class="c"># Describe snapshots</span>
    snapshots <span class="o">=</span> ec2_client.describe_snapshots<span class="o">(</span><span class="nv">OwnerIds</span><span class="o">=[</span><span class="s1">'self'</span><span class="o">])[</span><span class="s1">'Snapshots'</span><span class="o">]</span>
    
    <span class="c"># Filter snapshots older than 30 days</span>
    old_snapshots <span class="o">=</span> <span class="o">[</span>snap <span class="k">for </span>snap <span class="k">in </span>snapshots <span class="k">if </span>snap[<span class="s1">'StartTime'</span><span class="o">]</span> &lt; time_threshold]
    
    <span class="c"># Delete old snapshots</span>
    <span class="k">for </span>snapshot <span class="k">in </span>old_snapshots:
        snapshot_id <span class="o">=</span> snapshot[<span class="s1">'SnapshotId'</span><span class="o">]</span>
        ec2_client.delete_snapshot<span class="o">(</span><span class="nv">SnapshotId</span><span class="o">=</span>snapshot_id<span class="o">)</span>
        print<span class="o">(</span>f<span class="s2">"Deleted snapshot: {snapshot_id}"</span><span class="o">)</span>
    
    <span class="k">return</span> <span class="o">{</span>
        <span class="s1">'statusCode'</span>: 200,
        <span class="s1">'body'</span>: f<span class="s2">"Deleted {len(old_snapshots)} snapshots."</span>
    <span class="o">}</span>

<span class="c"># zip Package for the Lambda Function</span>
root@ubt-server:~/pythonwork# zip <span class="k">function</span>.zip app-snapshot-older-30days.py</code></pre></figure>

<ul>
  <li>Email me when a security group allow inbound SSH (port 22) from everywhere (0.0.0.0/0)</li>
</ul>

<p>To achieve this, we need:</p>

<ol>
  <li>AWS CloudTrail enable</li>
  <li>Create CloudWatch Event Rule to capture AWS CloudTrail logs for security group changes</li>
  <li>Create bellow Lambda Function if inbound allow port 22 from everywhere are met</li>
  <li>Allow CloudWatch Events to Invoke the Lambda Function</li>
  <li>Add the Lambda Function as a Target for the CloudWatch Event Rule</li>
</ol>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">root@ubt-server:~/pythonwork# vim app-sg-allow-22.py
import boto3
import json

def lambda_handler<span class="o">(</span>event, context<span class="o">)</span>:
    <span class="c"># Initialize boto3 clients</span>
    ses_client <span class="o">=</span> boto3.client<span class="o">(</span><span class="s1">'ses'</span><span class="o">)</span>
    ec2_client <span class="o">=</span> boto3.client<span class="o">(</span><span class="s1">'ec2'</span><span class="o">)</span>
    
    <span class="c"># Email details</span>
    sender <span class="o">=</span> <span class="s1">'zhbsoftboy1@gmail.com'</span>
    recipient <span class="o">=</span> <span class="s1">'zhbsoftboy1@gmail.com'</span>
    subject <span class="o">=</span> <span class="s1">'Security Group Alert: Port 22 Open to everywhere'</span>
    
    <span class="c"># Extract details from the event</span>
    detail <span class="o">=</span> event[<span class="s1">'detail'</span><span class="o">]</span>
    event_name <span class="o">=</span> detail[<span class="s1">'eventName'</span><span class="o">]</span>
    security_group_id <span class="o">=</span> None
    
    <span class="k">if </span>event_name <span class="o">==</span> <span class="s1">'AuthorizeSecurityGroupIngress'</span>:
        security_group_id <span class="o">=</span> detail[<span class="s1">'requestParameters'</span><span class="o">][</span><span class="s1">'groupId'</span><span class="o">]</span>
        ip_permissions <span class="o">=</span> detail[<span class="s1">'requestParameters'</span><span class="o">][</span><span class="s1">'ipPermissions'</span><span class="o">][</span><span class="s1">'items'</span><span class="o">]</span>
    <span class="k">elif </span>event_name <span class="o">==</span> <span class="s1">'CreateSecurityGroup'</span>:
        security_group_id <span class="o">=</span> detail[<span class="s1">'responseElements'</span><span class="o">][</span><span class="s1">'groupId'</span><span class="o">]</span>
        ip_permissions <span class="o">=</span> detail[<span class="s1">'requestParameters'</span><span class="o">][</span><span class="s1">'ipPermissionsEgress'</span><span class="o">][</span><span class="s1">'items'</span><span class="o">]</span>
    
    <span class="c"># Check if port 22 is open to 0.0.0.0/0</span>
    <span class="k">if </span>security_group_id and ip_permissions:
        <span class="k">for </span>permission <span class="k">in </span>ip_permissions:
            <span class="k">if</span> <span class="s1">'ipRanges'</span> <span class="k">in </span>permission:
                <span class="k">for </span>ip_range <span class="k">in </span>permission[<span class="s1">'ipRanges'</span><span class="o">][</span><span class="s1">'items'</span><span class="o">]</span>:
                    <span class="k">if </span>ip_range[<span class="s1">'cidrIp'</span><span class="o">]</span> <span class="o">==</span> <span class="s1">'0.0.0.0/0'</span> and permission[<span class="s1">'fromPort'</span><span class="o">]</span> <span class="o">==</span> 22 and permission[<span class="s1">'toPort'</span><span class="o">]</span> <span class="o">==</span> 22:
                        <span class="c"># Compose email body</span>
                        body_text <span class="o">=</span> <span class="o">(</span>f<span class="s2">"Security Group ID: {security_group_id} has been modified to allow port 22 from everywhere (0.0.0.0/0)."</span><span class="o">)</span>
                        body_html <span class="o">=</span> f<span class="s2">"""&lt;html&gt;
                        &lt;head&gt;&lt;/head&gt;
                        &lt;body&gt;
                          &lt;h1&gt;Security Group Alert&lt;/h1&gt;
                          &lt;p&gt;Security Group ID: &lt;b&gt;{security_group_id}&lt;/b&gt; has been modified to allow port 22 from everywhere (0.0.0.0/0).&lt;/p&gt;
                        &lt;/body&gt;
                        &lt;/html&gt;"""</span>
                        
                        <span class="c"># Send email</span>
                        response <span class="o">=</span> ses_client.send_email<span class="o">(</span>
                            <span class="nv">Source</span><span class="o">=</span>sender,
                            <span class="nv">Destination</span><span class="o">={</span><span class="s1">'ToAddresses'</span>: <span class="o">[</span>recipient]<span class="o">}</span>,
                            <span class="nv">Message</span><span class="o">={</span>
                                <span class="s1">'Subject'</span>: <span class="o">{</span><span class="s1">'Data'</span>: subject<span class="o">}</span>,
                                <span class="s1">'Body'</span>: <span class="o">{</span>
                                    <span class="s1">'Text'</span>: <span class="o">{</span><span class="s1">'Data'</span>: body_text<span class="o">}</span>,
                                    <span class="s1">'Html'</span>: <span class="o">{</span><span class="s1">'Data'</span>: body_html<span class="o">}</span>
                                <span class="o">}</span>
                            <span class="o">}</span>
                        <span class="o">)</span>
                        print<span class="o">(</span>f<span class="s2">"Email sent! Message ID: {response['MessageId']}"</span><span class="o">)</span>
    
    <span class="k">return</span> <span class="o">{</span>
        <span class="s1">'statusCode'</span>: 200,
        <span class="s1">'body'</span>: json.dumps<span class="o">(</span><span class="s1">'Lambda function executed successfully!'</span><span class="o">)</span>
    <span class="o">}</span></code></pre></figure>

<p><b> Conclusion</b></p>

<p>There are many ways to automate AWS tasks using Python Boto3 script. Together with Lambda and trigger, many resource tasks can be scheduled and managed in a scripted way.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[About Boto3]]></summary></entry><entry><title type="html">Customize Helm Chart for Zack’ Blog</title><link href="http://localhost:4000/jekyll/cat2/2024/05/12/Helm.html" rel="alternate" type="text/html" title="Customize Helm Chart for Zack’ Blog" /><published>2024-05-12T10:15:29+10:00</published><updated>2024-05-12T10:15:29+10:00</updated><id>http://localhost:4000/jekyll/cat2/2024/05/12/Helm</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2024/05/12/Helm.html"><![CDATA[<p><b> About Helm </b></p>

<p>Helm is the popular package manager for Kubernetes application deployment, not new to me as I had tried many charts previously with Kafka, and Redis helm charts installation, today I am going to explore how to build my own helm chart for this zack blog, also deep dive into the chart development for advanced templating, together with helm release management and version control, finally integrate my own chart with CI/CD for GitOps.  </p>

<p><b> Common Helm command</b></p>

<ul>
  <li>
    <p>helm list -A   # list releases across all namespaces</p>
  </li>
  <li>
    <p>helm pull bitnami/postgresql-ha –untar  # untar the chart after pull online chart</p>
  </li>
  <li>
    <p>helm repo add bitnami https://charts.bitnami.com/bitnami  # add a repo</p>
  </li>
  <li>
    <p>helm create zackblog-helm  # create a new chart</p>
  </li>
  <li>
    <p>helm install zackblog-helm ~/zackblog-helm -n NAMESPACE -f dev-values.yaml # define ns and override with a new value file</p>
  </li>
  <li>
    <p>helm upgrade zackblog-helm ~/zackblog-helm –set image.repository=<new-image-repository> --set image.tag=<new-image-tag> # --set to upgrade chart with override a new value</new-image-tag></new-image-repository></p>
  </li>
  <li>
    <p>helm lint ~/zackblog-helm  # lint syntax</p>
  </li>
  <li>
    <p>helm rollback zackblog-helm 2   # rollback to revision 2 of a release</p>
  </li>
  <li>
    <p>helm uninstall zackblog-helm -n Production  # uninstall a chart from a ns</p>
  </li>
</ul>

<p><b> Start with own chart</b></p>

<ul>
  <li>create a new helm chart</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="o">[</span>root@freeipa-server ~]# helm create zackblog-helm
Creating zackblog-helm

<span class="c"># modify values.yaml</span>
<span class="o">[</span>root@freeipa-server zackblog]# vim values.yaml

replicaCount: 3

image:
  repository: zackz001/gitops-jekyll
  pullPolicy: IfNotPresent
  <span class="c"># Overrides the image tag.</span>
  tag: <span class="s2">"latest"</span>

service:
  <span class="nb">type</span>: NodePort
  port: 80</code></pre></figure>

<ul>
  <li>Lint chart syntacx before install</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># lint syntax</span>
<span class="o">[</span>root@freeipa-server ~]# helm lint zackblog-helm/
<span class="o">==&gt;</span> Linting zackblog-helm/
<span class="o">[</span>INFO] Chart.yaml: icon is recommended

1 chart<span class="o">(</span>s<span class="o">)</span> linted, 0 chart<span class="o">(</span>s<span class="o">)</span> failed

<span class="c"># install own chart</span>

<span class="o">[</span>root@freeipa-server ~]# helm <span class="nb">install </span>zackblog-helm zackblog-helm
NAME: zackblog-helm
LAST DEPLOYED: Mon May 13 21:27:14 2024
NAMESPACE: default
STATUS: deployed
REVISION: 1
NOTES:
1. Get the application URL by running these commands:
  <span class="nb">export </span><span class="nv">NODE_PORT</span><span class="o">=</span><span class="si">$(</span>kubectl get <span class="nt">--namespace</span> default <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">"{.spec.ports[0].nodePort}"</span> services zackblog-helm<span class="si">)</span>
  <span class="nb">export </span><span class="nv">NODE_IP</span><span class="o">=</span><span class="si">$(</span>kubectl get nodes <span class="nt">--namespace</span> default <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">"{.items[0].status.addresses[0].address}"</span><span class="si">)</span>
  <span class="nb">echo </span>http://<span class="nv">$NODE_IP</span>:<span class="nv">$NODE_PORT</span>

<span class="o">[</span>root@freeipa-server ~]# helm list <span class="nt">-a</span>
NAME            NAMESPACE   REVISION    UPDATED                                     STATUS      CHART               APP VERSION
argo-cd         default     1           2024-04-29 06:14:18.117158759 +0000 UTC     deployed    argo-cd-6.7.17      v2.10.8    
zackblog-helm   default     1           2024-05-13 21:27:14.825391301 +1000 AEST    deployed    zackblog-helm-0.1.0 1.16.0 

<span class="o">[</span>root@freeipa-server ~]# kubectl get deployments.apps | <span class="nb">grep </span>zack
zackblog-helm                              3/3     3            3           113s
<span class="o">[</span>root@freeipa-server ~]# kubectl get svc | <span class="nb">grep </span>zack
zackblog-helm                              NodePort    10.43.90.209    &lt;none&gt;        80:31070/TCP                 2m7s</code></pre></figure>

<ul>
  <li>Customize vaule.yaml by change replica and image tag</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># modify vaule.yaml to scale down and change image to v138</span>
<span class="o">[</span>root@freeipa-server ~]# vim zackblog-helm/values.yaml
replicaCount: 1

image:
  repository: zackz001/gitops-jekyll
  pullPolicy: IfNotPresent
  <span class="c"># Overrides the image tag.</span>
  tag: <span class="s2">"v139"</span>

<span class="o">[</span>root@freeipa-server ~]# helm list <span class="nt">-a</span>
NAME            NAMESPACE   REVISION    UPDATED                                     STATUS      CHART               APP VERSION
argo-cd         default     1           2024-04-29 06:14:18.117158759 +0000 UTC     deployed    argo-cd-6.7.17      v2.10.8    
zackblog-helm   default     2           2024-05-13 21:31:16.523093364 +1000 AEST    deployed    zackblog-helm-0.1.0 1.16.0     
<span class="o">[</span>root@freeipa-server ~]# kubectl get deployments.apps | <span class="nb">grep </span>zack
zackblog-helm                              1/1     1            1           4m31s</code></pre></figure>

<ul>
  <li>Override values.yaml by -f and deploy same chart to different environments</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># create a dev ns then deploy and override with dev-values.yaml</span>
<span class="o">[</span>root@freeipa-server ~]# vim zackblog-helm/dev-values.yaml
image:
  repository: zackz001/gitops-jekyll
  tag: v140
replicaCount: 2
service:
  <span class="nb">type</span>: NodePort
  port: 80

<span class="o">[</span>root@freeipa-server ~]# kubectl create ns dev
namespace/dev created
<span class="o">[</span>root@freeipa-server ~]# helm <span class="nb">install </span>dev-zackblog-helm zackblog-helm <span class="nt">-f</span> dev-values.yaml <span class="nt">-n</span> dev
Error: INSTALLATION FAILED: open dev-values.yaml: no such file or directory
<span class="o">[</span>root@freeipa-server ~]# helm <span class="nb">install </span>dev-zackblog-helm zackblog-helm <span class="nt">-f</span> zackblog-helm/dev-values.yaml <span class="nt">-n</span> dev
NAME: dev-zackblog-helm
LAST DEPLOYED: Mon May 13 21:36:39 2024
NAMESPACE: dev
STATUS: deployed
REVISION: 1
NOTES:
1. Get the application URL by running these commands:
  <span class="nb">export </span><span class="nv">NODE_PORT</span><span class="o">=</span><span class="si">$(</span>kubectl get <span class="nt">--namespace</span> dev <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">"{.spec.ports[0].nodePort}"</span> services dev-zackblog-helm<span class="si">)</span>
  <span class="nb">export </span><span class="nv">NODE_IP</span><span class="o">=</span><span class="si">$(</span>kubectl get nodes <span class="nt">--namespace</span> dev <span class="nt">-o</span> <span class="nv">jsonpath</span><span class="o">=</span><span class="s2">"{.items[0].status.addresses[0].address}"</span><span class="si">)</span>
  <span class="nb">echo </span>http://<span class="nv">$NODE_IP</span>:<span class="nv">$NODE_PORT</span>

<span class="o">[</span>root@freeipa-server ~]# kubectl get deployments.apps <span class="nt">-n</span> dev
NAME                READY   UP-TO-DATE   AVAILABLE   AGE
dev-zackblog-helm   2/2     2            2           96s
<span class="o">[</span>root@freeipa-server ~]# kubectl get svc <span class="nt">-n</span> dev
NAME                TYPE       CLUSTER-IP      EXTERNAL-IP   PORT<span class="o">(</span>S<span class="o">)</span>        AGE
dev-zackblog-helm   NodePort   10.43.239.229   &lt;none&gt;        80:31391/TCP   103s</code></pre></figure>

<ul>
  <li>Advanced templating to add pvc into chart</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># add templates/pvc.yaml</span>
<span class="o">[</span>root@freeipa-server ~]# vim zackblog-helm/templates/pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: longhron-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn
  resources:
    requests:
      storage: 1Gi

<span class="c"># add pvc in values.yaml</span>
<span class="o">[</span>root@freeipa-server ~]# vim zackblog-helm/values.yaml
pvc:
  enabled: <span class="nb">true</span>
  templateFiles:
    - pvc.yaml

<span class="c"># add persistentVolumeClaim in templates/deployment.yaml</span>
<span class="o">[</span>root@freeipa-server ~]# vim zackblog-helm/templates/deployment.yaml
...
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: longhron-pvc
...
<span class="o">[</span>root@freeipa-server ~]# helm upgrade zackblog-helm zackblog-helm
Release <span class="s2">"zackblog-helm"</span> has been upgraded. Happy Helming!</code></pre></figure>

<p><b> CICD integration to deploy chart with ArgoCD </b></p>

<p>Now commit and upload “zackblog-helm” folder into github repo, create ArgoCD application manifest to sync with from  path of own helm chart</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># argoCD application manifest</span>
project: default
<span class="nb">source</span>:
  repoURL: <span class="s1">'https://github.com/ZackZhouHB/zack-gitops-project.git'</span>
  path: argo-helm-zackblog
  targetRevision: editing
  helm:
    valueFiles:
      - values.yaml
destination:
  server: <span class="s1">'https://kubernetes.default.svc'</span>
  namespace: helm
syncPolicy:
  automated: <span class="o">{}</span>
  syncOptions:
    - <span class="nv">CreateNamespace</span><span class="o">=</span><span class="nb">true</span></code></pre></figure>

<p><img src="/assets/helm1.png" alt="image tooltip here" /></p>

<p><b> Conclusion</b></p>

<p>Finally, I had a chance to go over helm, it makes package management easier and more convenient, through charts, k8s deployment can be more flexible with values and templates that can be deployed and reusable into different environments, it provides versioning and rollbacks, also allow customization of the template. however using on-line chart can also be risky in a production environment with quality, dependency and security risks.</p>

<p>Overall I think helm chart is a very good way to start deployment into k8s.</p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[About Helm]]></summary></entry><entry><title type="html">PostgreSQL: Prod-Grade with k8s Operator</title><link href="http://localhost:4000/jekyll/cat2/2024/05/11/PS4.html" rel="alternate" type="text/html" title="PostgreSQL: Prod-Grade with k8s Operator" /><published>2024-05-11T10:15:29+10:00</published><updated>2024-05-11T10:15:29+10:00</updated><id>http://localhost:4000/jekyll/cat2/2024/05/11/PS4</id><content type="html" xml:base="http://localhost:4000/jekyll/cat2/2024/05/11/PS4.html"><![CDATA[<p><b> Production grade PostgreSQL in K8S</b></p>

<p>Despite all the challenges, in the last 2 years, clever people still managed ways to deploy production-grade database within a Kubernetes cluster by using Kubernetes as a platform to develop custom resource definition (CRDs) like helm charts like bitnami/postgresql-ha, and PostgreSQL Operator like CrunchyData/postgres-operator or zalando/postgres-operator.</p>

<p>Last post I was able to deploy a single PostgreSQL in local k8s, but I had to manually create Kubernetes namespaces, define database creds, configuration and environment variables into k8s secret and configmap, also to define the statefulset yaml with volume claim template.</p>

<p>Still I was not able to configure HA and failover as I found it is so limited and a headache within K8S if only relying on statefulset. Luckily there are engineers out there to develop helm and opeartor to get the job done.</p>

<p><b> CrunchyData Postgres-Operator</b></p>

<p>In this session, I will follow bellow steps to</p>

<ul>
  <li>Deploy PostgreSQL Operator</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># Clone the CrunchyData Postgres Operator</span>
<span class="o">[</span>root@freeipa-server ~]# git clone https://github.com/CrunchyData/postgres-operator-examples.git

<span class="c"># create namespace and deploy GPO Postgres Operatorusing kustomize</span>
<span class="o">[</span>root@freeipa-server postgres-operator-examples]# kubectl apply <span class="nt">-k</span> kustomize/install/namespace
namespace/postgres-operator created
<span class="o">[</span>root@freeipa-server postgres-operator-examples]# kubectl apply <span class="nt">--server-side</span> <span class="nt">-k</span> kustomize/install/default
customresourcedefinition.apiextensions.k8s.io/pgadmins.postgres-operator.crunchydata.com serverside-applied
customresourcedefinition.apiextensions.k8s.io/pgupgrades.postgres-operator.crunchydata.com serverside-applied
customresourcedefinition.apiextensions.k8s.io/postgresclusters.postgres-operator.crunchydata.com serverside-applied
serviceaccount/pgo serverside-applied
clusterrole.rbac.authorization.k8s.io/postgres-operator serverside-applied
clusterrolebinding.rbac.authorization.k8s.io/postgres-operator serverside-applied
deployment.apps/pgo serverside-applied

<span class="c"># validate deploy status</span>
<span class="o">[</span>root@freeipa-server postgres-operator-examples]# kubectl get all <span class="nt">-n</span> postgres-operator
NAME                      READY   STATUS    RESTARTS   AGE
pod/pgo-77d6b49b8-wrdjp   1/1     Running   0          2m47s

NAME                  READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/pgo   1/1     1            1           2m47s

NAME                            DESIRED   CURRENT   READY   AGE
replicaset.apps/pgo-77d6b49b8   1         1         1       2m47s</code></pre></figure>

<ul>
  <li>Deploy HA PostgreSQL Cluster</li>
</ul>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># Create a Postgres Cluster named "hippo" in "postgres-operator" ns</span>
<span class="o">[</span>root@freeipa-server postgres-operator-examples]# kubectl apply <span class="nt">-k</span> kustomize/postgres
postgrescluster.postgres-operator.crunchydata.com/hippo created

<span class="o">[</span>root@freeipa-server postgres-operator-examples]# kubectl get all <span class="nt">-n</span> postgres-operator
NAME                          READY   STATUS    RESTARTS   AGE
pod/hippo-backup-dvks-m4z5m   1/1     Running   0          56s
pod/hippo-instance1-582s-0    4/4     Running   0          2m14s
pod/hippo-repo-host-0         2/2     Running   0          2m14s
pod/pgo-77d6b49b8-wrdjp       1/1     Running   0          6m38s

NAME                      TYPE        CLUSTER-IP      EXTERNAL-IP   PORT<span class="o">(</span>S<span class="o">)</span>    AGE
service/hippo-ha          ClusterIP   10.43.249.159   &lt;none&gt;        5432/TCP   2m14s
service/hippo-ha-config   ClusterIP   None            &lt;none&gt;        &lt;none&gt;     2m14s
service/hippo-pods        ClusterIP   None            &lt;none&gt;        &lt;none&gt;     2m14s
service/hippo-primary     ClusterIP   None            &lt;none&gt;        5432/TCP   2m14s
service/hippo-replicas    ClusterIP   10.43.17.57     &lt;none&gt;        5432/TCP   2m14s

NAME                  READY   UP-TO-DATE   AVAILABLE   AGE
deployment.apps/pgo   1/1     1            1           6m38s

NAME                            DESIRED   CURRENT   READY   AGE
replicaset.apps/pgo-77d6b49b8   1         1         1       6m38s

NAME                                    READY   AGE
statefulset.apps/hippo-instance1-582s   1/1     2m14s
statefulset.apps/hippo-repo-host        1/1     2m14s

NAME                          COMPLETIONS   DURATION   AGE
job.batch/hippo-backup-dvks   0/1           56s        56s

<span class="c"># retrieve database password from Kubernetes secret</span>
<span class="o">[</span>root@freeipa-server postgres-operator-examples]# kubectl get secret hippo-pguser-hippo <span class="nt">-n</span> postgres-operator <span class="nt">-o</span><span class="o">=</span><span class="nv">jsonpath</span><span class="o">=</span><span class="s1">'{.data.password}'</span> | <span class="nb">base64</span> <span class="nt">--decode</span>
jZiBWXMGRiEOA6wAEj<span class="p">;</span>lRhsM</code></pre></figure>

<p>Connect an application to PostgreSQL cluster</p>

<p>Here we use Keycloak, a popular open-source identity management tool that is backed by a PostgreSQL database. Using the hippo cluster we created, we can deploy the following manifest file</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># create deployment keycloak to connect PostgreSQL database</span>
<span class="o">[</span>root@freeipa-server postgres-operator-examples]# vim kustomize/keycloak/keycloak.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak
  namespace: postgres-operator
  labels:
    app.kubernetes.io/name: keycloak
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: keycloak
  template:
    metadata:
      labels:
        app.kubernetes.io/name: keycloak
    spec:
      containers:
      - image: quay.io/keycloak/keycloak:latest
        args: <span class="o">[</span><span class="s2">"start-dev"</span><span class="o">]</span>
        name: keycloak
        <span class="nb">env</span>:
        - name: DB_VENDOR
          value: <span class="s2">"postgres"</span>
        - name: DB_ADDR
          valueFrom: <span class="o">{</span> secretKeyRef: <span class="o">{</span> name: hippo-pguser-hippo, key: host <span class="o">}</span> <span class="o">}</span>
        - name: DB_PORT
          valueFrom: <span class="o">{</span> secretKeyRef: <span class="o">{</span> name: hippo-pguser-hippo, key: port <span class="o">}</span> <span class="o">}</span>
        - name: DB_DATABASE
          valueFrom: <span class="o">{</span> secretKeyRef: <span class="o">{</span> name: hippo-pguser-hippo, key: dbname <span class="o">}</span> <span class="o">}</span>
        - name: DB_USER
          valueFrom: <span class="o">{</span> secretKeyRef: <span class="o">{</span> name: hippo-pguser-hippo, key: user <span class="o">}</span> <span class="o">}</span>
        - name: DB_PASSWORD
          valueFrom: <span class="o">{</span> secretKeyRef: <span class="o">{</span> name: hippo-pguser-hippo, key: password <span class="o">}</span> <span class="o">}</span>
        - name: KEYCLOAK_ADMIN
          value: <span class="s2">"admin"</span>
        - name: KEYCLOAK_ADMIN_PASSWORD
          value: <span class="s2">"admin"</span>
        - name: KC_PROXY
          value: <span class="s2">"edge"</span>
        ports:
        - name: http
          containerPort: 8080
        - name: https
          containerPort: 8443
        readinessProbe:
          httpGet:
            path: /realms/master
            port: 8080
      restartPolicy: Always

<span class="o">[</span>root@freeipa-server postgres-operator-examples]# kubectl apply <span class="nt">-f</span> kustomize/keycloak/keycloak.yaml
deployment.apps/keycloak created

<span class="o">[</span>root@freeipa-server postgres-operator-examples]# kubectl get deployment <span class="nt">-n</span> postgres-operator 
NAME       READY   UP-TO-DATE   AVAILABLE   AGE
keycloak   1/1     1            1           4m27s
pgo        1/1     1            1           176m</code></pre></figure>

<ul>
  <li>Scale Up / Down</li>
</ul>

<p>Edit manifest to add 2 more replicas</p>

<p><img src="/assets/ps3-1.png" alt="image tooltip here" /></p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="o">[</span>root@freeipa-server kustomize]# kubectl apply <span class="nt">-k</span> postgres <span class="nt">-n</span> postgres-operator
postgrescluster.postgres-operator.crunchydata.com/hippo configured
<span class="c"># watch change</span>
<span class="o">[</span>root@freeipa-server postgres-operator-examples]# watch kubectl get pod <span class="nt">-L</span> postgres-operator.crunchydata.com/role <span class="nt">-l</span> postgres-operator.crunchydata.com/instance <span class="nt">-n</span> postgres-operator</code></pre></figure>

<p><img src="/assets/ps3-2.png" alt="image tooltip here" /></p>

<p>Failover testing:</p>

<p>Now I am going to delete the primary instance, one of the standby pod will take over and become primary automatically</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># delete the primary pod hippo-instance1-nhbc-0, then previous replica pod hippo-instance1-q8kk-0 promoted as master</span>
<span class="c"># pod hippo-instance1-nhbc-0 will up again as a replica</span>
<span class="o">[</span>root@freeipa-server kustomize]# kubectl delete po hippo-instance1-nhbc-0 <span class="nt">-n</span> postgres-operator 
pod <span class="s2">"hippo-instance1-nhbc-0"</span> deleted</code></pre></figure>

<p><img src="/assets/ps3-3.png" alt="image tooltip here" /></p>

<ul>
  <li>Perform Minor version rolling upgrade</li>
</ul>

<p>Here I changed the database version to 16.1, the cluster will start a rolling update by</p>

<ol>
  <li>
    <p>Applying new version to one of the standby pod first</p>
  </li>
  <li>
    <p>Then update another replica pod</p>
  </li>
  <li>
    <p>Promote the first upgraded replica as master</p>
  </li>
  <li>
    <p>Lastly the previous master pod will be updated and become a replica</p>
  </li>
</ol>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># validate DB version before miner upgrade</span>
<span class="o">[</span>root@freeipa-server kustomize]# kubectl <span class="nb">exec</span> <span class="nt">-it</span> hippo-instance1-q8kk-0 <span class="nt">-n</span> postgres-operator <span class="nt">--</span> psql <span class="nt">--version</span>
Defaulted container <span class="s2">"database"</span> out of: database, replication-cert-copy, pgbackrest, pgbackrest-config, postgres-startup <span class="o">(</span>init<span class="o">)</span>, nss-wrapper-init <span class="o">(</span>init<span class="o">)</span>
psql <span class="o">(</span>PostgreSQL<span class="o">)</span> 16.2</code></pre></figure>

<p><img src="/assets/ps3-5.png" alt="image tooltip here" /></p>

<p><img src="/assets/ps3-4.png" alt="image tooltip here" /></p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># validate DB version after miner version change</span>
<span class="o">[</span>root@freeipa-server kustomize]# kubectl <span class="nb">exec</span> <span class="nt">-it</span> hippo-instance1-q8kk-0 <span class="nt">-n</span> postgres-operator <span class="nt">--</span> psql <span class="nt">--version</span>
Defaulted container <span class="s2">"database"</span> out of: database, replication-cert-copy, pgbackrest, pgbackrest-config, postgres-startup <span class="o">(</span>init<span class="o">)</span>, nss-wrapper-init <span class="o">(</span>init<span class="o">)</span>
psql <span class="o">(</span>PostgreSQL<span class="o">)</span> 16.1</code></pre></figure>

<ul>
  <li>Backup</li>
</ul>

<p>Add backup Cron job into manifest to add weekly full backup and daily incremental</p>

<p><img src="/assets/ps3-6.png" alt="image tooltip here" /></p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="o">[</span>root@freeipa-server ~]# kubectl get cronjobs <span class="nt">-n</span> postgres-operator 
NAME               SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE
hippo-repo1-full   0 1 <span class="k">*</span> <span class="k">*</span> 0     False     0        &lt;none&gt;          5m21s
hippo-repo1-incr   0 1 <span class="k">*</span> <span class="k">*</span> 1-6   False     0        &lt;none&gt;          5m21s</code></pre></figure>

<ul>
  <li>Deploy Monitoring (Prom + Grafaba)</li>
</ul>

<p>Finally, let’s set up the monitoring stack for PostgreSQL by using Pormthues and Grafana.</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="c"># deploy monitoring stack</span>
<span class="o">[</span>root@freeipa-server kustomize]# kubectl apply <span class="nt">-k</span> monitoring
serviceaccount/alertmanager created
serviceaccount/grafana created
serviceaccount/prometheus created
clusterrole.rbac.authorization.k8s.io/prometheus created
clusterrolebinding.rbac.authorization.k8s.io/prometheus created
configmap/alert-rules-config created
configmap/alertmanager-config created
configmap/crunchy-prometheus created
configmap/grafana-dashboards created
configmap/grafana-datasources created
secret/grafana-admin created
service/crunchy-alertmanager created
service/crunchy-grafana created
service/crunchy-prometheus created
persistentvolumeclaim/alertmanagerdata created
persistentvolumeclaim/grafanadata created
persistentvolumeclaim/prometheusdata created
deployment.apps/crunchy-alertmanager created
deployment.apps/crunchy-grafana created
deployment.apps/crunchy-prometheus created
<span class="c"># Edit Grafana service to NodePort</span>
<span class="o">[</span>root@freeipa-server postgres-operator-examples]# kubectl edit svc crunchy-grafana <span class="nt">-n</span> postgres-operator
service/crunchy-grafana edited
<span class="c"># exec into master database container, using pgbench to generate tables</span>
<span class="o">[</span>root@freeipa-server postgres-operator-examples]# kubectl <span class="nb">exec</span> <span class="nt">-it</span> hippo-instance1-nhbc-0 <span class="nt">-c</span> database <span class="nt">-n</span> postgres-operator <span class="nt">--</span> bash

bash-4.4<span class="nv">$ </span>pgbench <span class="nt">-i</span> <span class="nt">-s</span> 100 <span class="nt">-U</span> postgres <span class="nt">-d</span> postgres
dropping old tables...
NOTICE:  table <span class="s2">"pgbench_accounts"</span> does not exist, skipping
NOTICE:  table <span class="s2">"pgbench_branches"</span> does not exist, skipping
NOTICE:  table <span class="s2">"pgbench_history"</span> does not exist, skipping
NOTICE:  table <span class="s2">"pgbench_tellers"</span> does not exist, skipping
creating tables...
generating data <span class="o">(</span>client-side<span class="o">)</span>...
10000000 of 10000000 tuples <span class="o">(</span>100%<span class="o">)</span> <span class="k">done</span> <span class="o">(</span>elapsed 45.61 s, remaining 0.00 s<span class="o">)</span></code></pre></figure>

<p><img src="/assets/ps3-7.png" alt="image tooltip here" /></p>

<p>Some Grafana predefined PostgreSQL dashboard, unfortunately I donot have much data in it to show more monitoring status.</p>

<p><img src="/assets/ps3-8.png" alt="image tooltip here" /></p>

<p><img src="/assets/ps3-9.png" alt="image tooltip here" /></p>

<p><b> Conclusion</b></p>

<p>This is the final session of this PostgreSQL series, together I have explored PostgreSQL from very basic docker deployment with replica, to production-grade deployment in Kubernetes using operator, practise from backup, monitoring, rolling update, to HA, failover and scale up. HAHA!</p>]]></content><author><name></name></author><category term="jekyll" /><category term="Cat2" /><summary type="html"><![CDATA[Production grade PostgreSQL in K8S]]></summary></entry></feed>