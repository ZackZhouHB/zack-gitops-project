---
layout: post
title:  " RedHat Idm on AWS PoC "
date:   2024-05-01 11:15:29 +1100
categories: jekyll Cat2
---

<b> RedHat idm on AWS design </b>

The proof of concept aims to achieve that, where a Red Hat IDM (Identity Management) server hosted in AWS with its own domain (zack.linux.com) is integrated with an existing AWS Managed AD (zack.existing.com) for authentication of Linux EC2 instances across multiple AWS accounts. The AWS managed AD also synced with Azure AD. 

In the future picture, all users will be created and maintained centrally from Azure AD, then placed into an OU named "idm" if they require AWS Linux EC2 instances access. Then Red Hat IDM would be able to add or sync those users and configure RBAC and HBAC accordingly.

<b> Set up Red Hat IDM Server and AWS managed AD:</b>

- Launch a Red Hat idm EC2 instance

- Follow previous post for idm installation and configuration.

- create AWS managed directory service

![image tooltip here](/assets/awsad1.png)

- create ADDC management windows ec2 instance, create test user1 from domain zack.existing.com

<b> Configure DNS:</b>

- Set up DNS resolution to ensure that the IDM server and the existing AWS Managed AD can resolve each other's domain names.

- Create DNS records to point idm.poc.com to the IDM server's IP address and configure DNS forwarding or conditional forwarding to resolve queries for the zackad.awsmanaged.com domain to AWS Managed AD DNS servers.

<b> Establish Trust Relationship:</b>

- Set up a two-way trust relationship between the Red Hat IDM domain (idm.poc.com) and the AWS Managed AD domain (zackad.awsmanaged.com).

- Follow the AWS documentation for establishing trust relationships with AWS Managed Microsoft AD.

- Configure trust settings on both sides to allow authentication and authorization between the domains.

<b> Configure SSSD on existing Linux EC2 Instances:</b>

- Install and configure the System Security Services Daemon (SSSD) on your Linux EC2 instances.

- Configure SSSD to authenticate users against the Red Hat IDM server.

- Ensure that SSSD is configured to use the trust relationship established between the IDM domain and the AWS Managed AD domain for authentication.

<b> Role-Based and Host-Based Access Control:</b>

- Define roles and access policies within the Red Hat IDM server for role-based access control.

- Utilize the trust relationship between the IDM domain and the AWS Managed AD domain to grant access based on user groups and permissions stored in both directories.

- Implement host-based access control using SSSD configuration on the Linux EC2 instances, leveraging group memberships and permissions from both IDM and AWS Managed AD.

- design pre-define roles in idm (developer, admin, vendor and etc)

- design pre-define host groups in idm (aws accounts vs Lab, Dev, Staging and Prd)

<b> Establish automation for future host and user management</b>

- use ansible or other scripted method to add or remove host and user

- enable ansible dynamic inventory to list and descover new or existing AWS linux ec2 instances 


More info can be found via [Freeipa workshop](https://freeipa.readthedocs.io/en/latest/workshop.html), [Red Hat product documentation](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/9/html/managing_idm_users_groups_hosts_and_access_control_rules/index), [Redhat Idm on AWS with DNS forwarder](https://chamathb.wordpress.com/2019/06/21/setting-up-rhel-idm-with-integrated-dns-on-aws/), [idmfreeipa DNS forwarder configurations on AWS](https://www.reddit.com/r/redhat/comments/6ixtoe/idmfreeipa_dns_forwarding/), and [Automating Red Hat Identity Management installation with Ansible](https://redhat.com/en/blog/automating-red-hat-identity-management-installation).

