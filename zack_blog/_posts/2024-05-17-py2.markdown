---
layout: post
title:  " Python: File Handling for AWS tagging"
date:   2024-05-17 11:15:29 +1100
categories: jekyll Cat2
---

<b> About Python File Handling</b>

In the previous post I developed shell script + awscli to apply [aws EC2 tages](https://zackz.online/jekyll/cat2/2024/05/01/AWS-tagging.html), since the last post we discovered [Python Boto3](https://zackz.online/jekyll/cat2/2024/05/16/py1.html)scripts for AWS resource automation and management, I think it is time to improve the EC2 tagging task with Python and boto3, together with file handling to achieve:

1. List and export ec2 information to a CSV file (instanceID, default instance name, Existing tags)


2. define 4 mandatory tags in CSV header (Env, BizOwner, Technology, Project)


3. validate exported tags against the 4 mandatory new tags, if any of the new mandatory tags exists, then keep the tage and value, if any of the new mandatory tags do not exist, leave the value blank


3. Get csv file fill with mandatory tags input from Biz team (manual work)

4. open the updated CSV file, apply the mandatory tags based on the input value


5. create and trigger lambda function with aws config rules to enforce 4 mandatory tags whenever a new instance launch  



<b> List and export ec2 information to a CSV</b>

- First I need to import Python libraries for boto3, csv and os, then call boto3 sessions to retrieve EC2 information.

- Next step I will use Python "with open" and "for" loops to write each ec2 info to a csv file, also add mandatory tags write in the header fields

- Once passing csv file to get new tag input, use Python "csv.DictReader" to read from the file, then apply tags by "ec2.create_tags"

{% highlight shell %}

vim ec2_export_tag_csv.py

# Import libiaries
import boto3
import csv
import os

# Define the mandatory tags
MANDATORY_TAGS = ["Env", "BizOwner", "Technology", "Project"]

# Initialize boto3 clients
ec2 = boto3.client('ec2')
s3 = boto3.client('s3')

def list_ec2_instances():
    instances = []
    response = ec2.describe_instances()
    for reservation in response['Reservations']:
        for instance in reservation['Instances']:
            instance_id = instance['InstanceId']
            default_name = next((tag['Value'] for tag in instance.get('Tags', []) if tag['Key'] == 'Name'), 'No Name')
            tags = {tag['Key']: tag['Value'] for tag in instance.get('Tags', [])}
            instance_info = {
                'InstanceId': instance_id,
                'DefaultName': default_name,
                **{tag: tags.get(tag, '') for tag in MANDATORY_TAGS}
            }
            instances.append(instance_info)
    return instances

# write and loop each ec2 tag info, add MANDATORY_TAGS in fields
def export_to_csv(instances, filename='ec2_instances.csv'):
    fieldnames = ['InstanceId', 'DefaultName'] + MANDATORY_TAGS
    with open(filename, 'w', newline='') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for instance in instances:
            writer.writerow(instance)

# Update CSV by adding biz input, then apply all tags 
def update_tags_from_csv(filename='ec2_instances_updated.csv'):
    with open(filename, newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            instance_id = row['InstanceId']
            tags = [{'Key': tag, 'Value': row[tag]} for tag in MANDATORY_TAGS if row[tag]]
            if tags:
                ec2.create_tags(Resources=[instance_id], Tags=tags)

# skip the lambda function and config rule creation steps
def create_lambda_function(): # skip lambda creation
def create_config_rule(): # skip config rule creation

# print status
def main():
    instances = list_ec2_instances()
    export_to_csv(instances)
    print("CSV export complete. Please update the mandatory tags and save the file as 'ec2_instances_updated.csv'.")
    input("Press Enter after updating the CSV file...")
    update_tags_from_csv()
    print("Tags updated successfully.")

if __name__ == '__main__':
    main()
{% endhighlight %}

<b> How about managing tags for multiple AWS accounts </b>

Considering we have 20+ AWS accounts across the company and with more than 200 EC2 instances that need to apply tagging strategy, here I will 

1. use AWScli profile to configure each AWS account creds, 

2. Update Python scripts to call each account profile to apply all 20+ AWS accounts in sequence. 

3. here I will use my own 2 AWS accounts (ZackBlog and JoeSite) to create AWScli profiles to validate the Python scripts


{% highlight shell %}
# Add account creds into ~/.aws/credentials
vim ~/.aws/credentials

[aws_account_zackblog]
aws_access_key_id = xxxx
aws_secret_access_key = yyyy

[aws_account_joesite]
aws_access_key_id = zzzz
aws_secret_access_key = yyyy
{% endhighlight %}

{% highlight shell %}
# add profiles into ~/.aws/config
vim ~/.aws/config

[profile aws_account_zackblog]
region = ap-southeast-2

[profile aws_account_joesite]
region = ap-southeast-2

{% endhighlight %}

{% highlight shell %}
vim muti_ec2_export_tag_csv.py

# Import libraries 
import boto3
import csv
import os
from botocore.exceptions import ProfileNotFound

# Define the mandatory tags
MANDATORY_TAGS = ["Env", "BizOwner", "Technology", "Project"]

# Define AWS account profiles
AWS_PROFILES = ["aws_account_zackblog", "aws_account_joesite"]

# Retriete EC2 tags info by calling each AWS account profile boto3 session
def list_ec2_instances(profile_name):
    session = boto3.Session(profile_name=profile_name)
    ec2 = session.client('ec2')
    instances = []
    response = ec2.describe_instances()
    for reservation in response['Reservations']:
        for instance in reservation['Instances']:
            instance_id = instance['InstanceId']
            default_name = next((tag['Value'] for tag in instance.get('Tags', []) if tag['Key'] == 'Name'), 'No Name')
            tags = {tag['Key']: tag['Value'] for tag in instance.get('Tags', [])}
            instance_info = {
                'InstanceId': instance_id,
                'DefaultName': default_name,
                **{tag: tags.get(tag, '') for tag in MANDATORY_TAGS}
            }
            instances.append(instance_info)
    return instances

# Write into CSV for each profile
def export_to_csv(instances, profile_name, filename_prefix='ec2_instances'):
    filename = f"{filename_prefix}_{profile_name}.csv"
    fieldnames = ['InstanceId', 'DefaultName'] + MANDATORY_TAGS
    with open(filename, 'w', newline='') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
        writer.writeheader()
        for instance in instances:
            writer.writerow(instance)

# Update each csv for each profile, then apply tags accordingly
def update_tags_from_csv(profile_name, filename_prefix='ec2_instances_updated'):
    filename = f"{filename_prefix}_{profile_name}.csv"
    session = boto3.Session(profile_name=profile_name)
    ec2 = session.client('ec2')
    with open(filename, newline='') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            instance_id = row['InstanceId']
            tags = [{'Key': tag, 'Value': row[tag]} for tag in MANDATORY_TAGS if row[tag]]
            if tags:
                ec2.create_tags(Resources=[instance_id], Tags=tags)

# print status
def process_all_profiles():
    for profile in AWS_PROFILES:
        try:
            print(f"Processing profile: {profile}")
            instances = list_ec2_instances(profile)
            export_to_csv(instances, profile)
            print(f"CSV export complete for profile {profile}. Please update the mandatory tags and save the file as '{profile}_ec2_instances_updated.csv'.")
            input(f"Press Enter after updating the CSV file for profile {profile}...")
            update_tags_from_csv(profile)
            print(f"Tags updated successfully for profile {profile}.")
        except ProfileNotFound:
            print(f"Profile {profile} not found. Skipping.")

if __name__ == '__main__':
    process_all_profiles()
{% endhighlight %}

<b> Conclusion</b>

Now we can use Python Boto3 and file handling to achieve mutiple-aws account EC2 tagging. With Python "CSV" library, functions like "csv.DictReader", "with open" and "csv.DictWriter" to open, update and export CSV file, Python also supports handling data in JSON format with dictionary. 

In the next post I will see how to use Python Flask to redesign Zack's blog for Web application development.