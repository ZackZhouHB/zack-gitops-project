---
- name: Fetch content from file on Kubernetes master
  hosts: tag_Project_master
  become: yes
  tasks:
    - name: Fetch content from file
      ansible.builtin.fetch:
        src: /home/ubuntu/.kube/config
        dest: /tmp/fetched_file
        flat: yes


- hosts: tag_New_new
  become: yes
  gather_facts: yes
  vars:
    kubernetes_version: "1.28.7"
  tasks:
    - name: Create CRI-O config file
      file:
        path: "/etc/modules-load.d/crio.conf"
        state: touch

    - name: Add modules in conf file
      blockinfile:
        path: "/etc/modules-load.d/crio.conf"
        block: |
          overlay
          br_netfilter

    - name: Enable sysctl params
      file:
        path: "/etc/sysctl.d/99-kubernetes-cri.conf"
        state: touch

    - name: Add configuration
      blockinfile:
        path: "/etc/sysctl.d/99-kubernetes-cri.conf"
        block: |
          net.bridge.bridge-nf-call-iptables = 1
          net.ipv4.ip_forward = 1
          net.bridge.bridge-nf-call-ip6tables = 1

    - name: Load kernel modules overlay and br_netfilter
      modprobe:
        name: "{{ item }}"
        state: present
      loop:
        - overlay
        - br_netfilter

    - name: Reload parameters
      command: sudo sysctl --system

    - name: Disable swap
      shell: |
              sudo swapoff -a

    - name: Comment out swap entry in /etc/fstab
      lineinfile:
        path: /etc/fstab
        regexp: '^.*swap.*'
        line: '#\g<0>'
        backup: yes

    - name: Install required packages
      apt:
        name:
          - curl
        state: present

    - name: Enable CRI-O repository
      environment:
         OS: xUbuntu_22.04
         VERSION: 1.28
      shell: |
               echo "deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
               echo "deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:$VERSION.list
               curl -L https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable:cri-o:$VERSION/$OS/Release.key | apt-key add -
               curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | apt-key add -

    - name: Update apt package cache
      command: apt-get update
      become: yes

    - name: Install CRI-O and CRI-O tools
      command: apt-get install -y cri-o cri-o-runc cri-tools
      become: yes

    - name: Enable and start CRI-O service
      systemd:
        name: crio
        enabled: yes
        state: started

    - name: Install Kubernetes dependencies
      apt:
        name:
          - apt-transport-https
        state: present

    - name: Create kubernetes repo file
      file:
        path: "/etc/apt/sources.list.d/kubernetes.list"
        state: "touch"

    - name: Add K8s Source
      blockinfile:
        path: "/etc/apt/sources.list.d/kubernetes.list"
        block: |
              deb https://apt.kubernetes.io/ kubernetes-xenial main

    - name: Install Kubernetes components
      shell: |
              curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
              sudo apt-get update
              sudo apt-get install -y kubelet=1.28.1-00 kubeadm=1.28.1-00 kubectl=1.28.1-00
              sudo apt-mark hold kubelet kubeadm kubectl

    - name: Copy join command from Ansiblehost to the worker nodes.
      become: yes
      copy:
        src: /tmp/kubernetes_join_command
        dest: /tmp/kubernetes_join_command
        mode: 0777

    - name: Join the Worker nodes to the cluster.
      become: yes
      command: sh /tmp/kubernetes_join_command
      register: joined_or_not
      ignore_errors: yes



    - name: create .kube directory
      become_user: ubuntu
      ansible.builtin.shell:
        cmd: mkdir /home/ubuntu/.kube
      ignore_errors: yes

    - name: Copy file from server3 to server2
      ansible.builtin.copy:
        src: /tmp/fetched_file 
        dest: /home/ubuntu/.kube/config

    - name: Add Kubernetes repository
      ansible.builtin.shell: 
        cmd: echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.28/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list

    - name: Download Kubernetes GPG key
      ansible.builtin.shell:
        cmd: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.28/deb/Release.key | sudo gpg --yes --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Show available versions of kubeadm
      ansible.builtin.shell:
        cmd: apt-cache madison kubeadm


    - name: Unhold kubeadm package
      command: apt-mark unhold kubeadm
      ignore_errors: yes

    - name: Install specific kubeadm version
      shell: |
              apt-get update
              apt-get install -y kubeadm='{{ kubernetes_version }}-*'

    - name: Hold kubeadm package
      command: apt-mark hold kubeadm

    - name: Apply Kubernetes upgrade
      command: kubeadm upgrade node

    - name: Drain Kubernetes node
      become_user: ubuntu
      command: kubectl drain {{ nodename }} --ignore-daemonsets 

    - name: Unhold kubelet and kubectl packages
      command: apt-mark unhold kubelet kubectl
      ignore_errors: yes

    - name: Install specific kubelet and kubectl versions
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - "kubelet={{ kubernetes_version }}-*"
        - "kubectl={{ kubernetes_version }}-*"

    - name: Hold kubelet and kubectl packages
      command: apt-mark hold kubelet kubectl

    - name: Reload systemd manager configuration
      command: systemctl daemon-reload

    - name: Restart kubelet service
      command: systemctl restart kubelet

    - name: Uncordon Kubernetes node
      become_user: ubuntu
      command: kubectl uncordon  {{ nodename }} 

    - name: Reboot the system
      reboot:
        reboot_timeout: 300

    - name: Print join status
      debug:
        msg: "Worker nodes joined successfully."
      when: joined_or_not.rc == 0

