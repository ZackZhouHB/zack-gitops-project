name: "zack gitops workflow for iaac"
on: 
  push: 
    branches:
#      - main
      - editing
    paths:             # any change in folder "terraform" 
      - terraform/**   # for both stage and main, will trigger workflow
  
#  pull_request:        # no one can commit to main except approvel needed from main branch owner
#    branches:          # raise pull_request when merge from stage to main
#      - main           # will trigger workflow
#    paths:          
#      - terraform/**

env:                   # cred for AWS access, terrform is looking for      
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  BUCKET_TF_STATE: ${{ secrets.BUCKET_TF_STATE }}
  # also can be stored in github var
  AWS_DEFAULT_REGION: ap-southeast-2
  EKS_CLUSTER: zack-gitops-eks-prod
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  HOST_NAME: ${{secrets.HOST_NAME}}
  USER_NAME: ${{secrets.USER_NAME}}

jobs: 
  terraform:   # create a ubuntu container, cd to terraform dir, checkout source code
    name: "apply iaac code change"
    runs-on: ubuntu-latest    # from github runners containers 
    defaults:
      run:
        shell: bash
        working-directory: ./terraform
    
    steps:

      - name: SCM checkout
        uses: actions/checkout@v3

      - name: Configure AWS cli on runners
        uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-2

      - name: Debug AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID: $AWS_ACCESS_KEY_ID"
          echo "AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY"
          echo "AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION"

      - name: setup terraform on runners
        uses: hashicorp/setup-terraform@v3
        #with:
         # terraform_version: "1.1.7"

      - name: terraform init
        id: init
        run: terraform init -backend-config="bucket=$BUCKET_TF_STATE"

      - name: terraform validate
        id: validate
        run: terraform validate  

      - name: terraform plan
        id: plan
        run: terraform plan -no-color -input=false -out planfile # output to file for apply
        continue-on-error: true

      - name: terraform plan
        if: steps.plan.outcome == 'failure'
        run: exit 1 # if something goes wrong in the plan, fail the workflow

      - name: terraform apply  # apply only when push to main branch 
        id: apply
#        if: github.ref == 'refs/heads/main' && github.event_name == 'push' 
        run: terraform apply -auto-approve -input=false -parallelism=1 planfile # based on planfile

      - name: configure kube config on runners
        id: getkubeconfig
        if: steps.apply.outcome == 'success' 
        run: aws eks update-kubeconfig --region ${{ env.AWS_DEFAULT_REGION}} --name ${{ env.EKS_CLUSTER}}

#      - name: deploy zackwebapp
#        id: deployzackwebapp
#        if: steps.apply.outcome == 'success' && steps.getkubeconfig.outcome == 'success'
#        run: |
#          kubectl delete -f deployment.yaml -f service.yaml

#          kubectl wait --for=condition=available deployment/zackweb

#      - name: deploy argocd
#        id: deployeksargocd
#        if: steps.apply.outcome == 'success' 
#        run: |
#          kubectl create namespace argocd
#          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
#          kubectl wait --for=condition=available deployment/argocd-server -n argocd
#          kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
#          curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
#          sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
#          rm argocd-linux-amd64
#          echo "argocd admin initial-password -n argocd"
#          result=$(argocd admin initial-password -n argocd)
#          echo "Command result: $result"
          

      - name: deploy zackweb via argocd
        id: argocd-zackweb
        if: steps.apply.outcome == 'success' 
        run: |
          kubectl apply -f argo-application.yaml

#      - name: install Ingress controller
#        id: install-Ingress-controller
#        if: steps.apply.outcome == 'success' && steps.getkubeconfig.outcome == 'success'
#        run: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/aws/deploy.yaml



#      - name: deploy zackweb
#        id: zackwebdeploy
#        run: |
#          kubectl apply -f initialdeploy/initial-deploy.yaml
#          kubectl wait --for=condition=available deployment/zackweb
